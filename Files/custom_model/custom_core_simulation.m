function custom_core_simulation

global S wheelbase Name Excelsave name_rear_roll truckname 

warning('off' ,'all');
javaaddpath(which('MatlabGarbageCollector.jar'));
org.dt.matlab.utilities.JavaMemoryCleaner.clear(1);
clc;

Excelsave = 0;

dirData1 = dir('library/road_profiles/ridequality');
dirIndex = [dirData1.isdir];
filelist2 = {dirData1(~dirIndex).name}';

dirData3 = dir('library/road_profiles/CRG/*.crg');
dirIndex = [dirData3.isdir];
filelist3 = {dirData3(~dirIndex).name}';

S.f = figure('NumberTitle','off','Name','LHV Tool - Core simulation',...
             'color','w','toolbar','none','menubar','none','Units','Normalized',...
             'Position',[0.2 0.15 0.8 0.75],'visible','off'); 
         
S.back_button = uicontrol('style','pushbutton',...
                          'BackgroundColor','w',...
                          'String','Back',...
                          'FontSize',10,...
                          'FontUnits','Normalized',...
                          'FontWeight','bold',...
                          'ForeGroundColor','r',...
                          'units','normalized',...
                          'position',[0.005 0.94 0.1 0.05],...
                          'Callback',@Back_callback);


S.friction_panel = uipanel('Position',[0.85 0.94 0.1 0.05],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'highlightcolor','k'); 

S.friction_button = uicontrol(S.friction_panel,...
                              'style','pushbutton',...
                              'BackgroundColor','w',...
                              'String','Set',...
                              'FontSize',8,...
                              'FontUnits','Normalized',...
                              'FontWeight','bold',...
                              'units','normalized',...
                              'position',[0.65 0.26 0.3 0.5],...
                              'Callback',@friction_button_callback);

S.friction_edit = uicontrol(S.friction_panel,...
                            'style','edit',...
                            'BackgroundColor','w',...
                            'String','1',...
                            'FontSize',10,...
                          'FontUnits','Normalized',...
                            'FontWeight','bold',...
                            'units','normalized',...
                            'position',[0.4 0.3 0.2 0.4]);
                
S.friction_text = uicontrol(S.friction_panel,...
                            'Style','text',...
                            'Units','Normalized',...
                            'Position',[0.01 0.39 0.35 0.35],...
                            'backgroundcolor','w',...
                            'String','Friction',...
                            'FontSize', 7,...
                          'FontUnits','Normalized',...
                            'FontWeight','bold'); 
                         
S.Excel_results_toggle = uicontrol('Style','toggle',...
                                    'Units','Normalized',...
                                    'Position',[0.525 0.94 0.1 0.05],...
                                    'backgroundcolor','w',...
                                    'String','Export to Excel',...
                                    'FontSize', 10,...
                                    'FontWeight','bold',...
                                    'FontUnits','Normalized',...
                                    'Callback',@Excel);
                                
S.Truckname_edit = uicontrol('Style','edit',...
                             'Units','Normalized',...
                             'Position',[0.375 0.94 0.1 0.05],...
                             'backgroundcolor','w',...
                             'String',truckname,...
                             'FontSize', 10,...
                             'FontWeight','bold',...
                             'FontUnits','Normalized',...
                             'Callback',@Truckname);                 

S.simulate_button = uicontrol('style','pushbutton',...
                         'BackgroundColor','w',...
                         'String','Simulate',...
                         'FontSize',10,...
                          'FontUnits','Normalized',...
                         'FontWeight','bold',...
                         'units','normalized',...
                         'position',[0.88 0.04 0.1 0.06],...
                         'Callback',@simulate_callback);    
                     
S.select_all_toggle = uicontrol('style','toggle',...
                         'BackgroundColor','w',...
                         'String','Select all',...
                         'FontSize',10,...
                          'FontUnits','Normalized',...
                         'FontWeight','bold',...
                         'units','normalized',...
                         'position',[0.69 0.04 0.1 0.03],...
                         'Callback',@select_all_callback);
                     
%% CRG panel
S.CRG_panel = uipanel('Units','Centimeters',...
                      'Position',[0.1 13.5 9 2],...
                      'backgroundcolor','w',...
                      'Units','Normalized',...
                      'BorderWidth',2,...
                      'BorderType','Line',...
                      'FontSize',12,...
                      'FontUnits','Normalized',...
                      'FontWeight','bold',...
                      'Title','CRG',...
                      'highlightcolor','k'); 

S.enable_CRG_toggle = uicontrol(S.CRG_panel,...
                                'Style','toggle',...
                                'Units','Normalized',...
                                'Position',[0.01 0.12 0.15 0.99],...
                                'String','Deselected',...
                                'Fontweight','bold',...
                                'FontSize',7,...
                                'FontUnits','Normalized',...
                                'Callback',@enable_CRG_callback);

S.CRG_Road = uicontrol(S.CRG_panel,...
                          'style','popup',...
                          'BackgroundColor','w',...
                          'String',filelist3,...
                          'FontSize',8,...
                          'FontUnits','Normalized',...
                          'units','normalized',...
                          'Enable','Off',...
                          'position',[0.2 0.6 0.3 0.4]);     
                      
S.CRG_preview = uicontrol(S.CRG_panel,...
                          'style','push',...
                          'BackgroundColor','w',...
                          'String','Preview',...
                          'FontSize',8,...
                          'FontUnits','Normalized',...
                          'units','normalized',...
                          'Enable','Off',...
                          'position',[0.2 0.2 0.3 0.4],...
                          'Callback',@preview_callback);      
                      
S.CRG_edit = uicontrol(S.CRG_panel,...
                              'style','edit',...
                              'BackgroundColor','w',...
                              'String','35',...
                              'FontSize',8,...
                              'FontUnits','Normalized',...
                              'units','normalized',...
                              'Enable','off',...
                              'position',[0.7 0.25 0.1 0.25]);
                
S.CRG_text = uicontrol(S.CRG_panel,...
                             'Style','text',...
                             'Units','Normalized',...
                             'Position',[0.6 0.8 0.3 0.2],...
                             'backgroundcolor','w',...
                             'String','Velocity [km/h]',...
                             'FontSize', 8,...
                             'FontUnits','Normalized');                      
                           
%% Start ability panel               

S.Startability_panel = uipanel('Units','Centimeters',...
                               'Position',[0.1 11.5 9 2],...
                               'backgroundcolor','w',...
                               'Units','Normalized',...
                               'BorderWidth',2,...
                               'BorderType','Line',...
                               'FontSize',11,...
                               'FontUnits','Normalized',...
                               'FontWeight','bold',...
                               'Title','Start ability',...
                               'highlightcolor','k');

S.enable_startability_toggle = uicontrol(S.Startability_panel,...
                                        'Style','toggle',...
                                        'Units','Normalized',...
                                        'Position',[0.01 0.12 0.15 0.99],...
                                        'String','Deselected',...
                                        'Fontweight','bold',...
                                        'FontSize',7,...
                                        'FontUnits','Normalized',...
                                        'Callback',@enable_startability_callback);        

S.Startability_check = uicontrol(S.Startability_panel,...
                          'style','check',...
                          'BackgroundColor','w',...
                          'units','normalized',...
                          'Value',1,...
                          'Enable','Off',...
                          'position',[0.425 0.25 0.1 0.25]);
                
S.Startability_text = uicontrol(S.Startability_panel,...
                           'Style','text',...
                           'Units','Normalized',...
                           'Position',[0.3 0.6 0.3 0.2],...
                           'backgroundcolor','w',...
                           'String','Traction control',...                           
                           'FontSize', 8,...
                           'FontUnits','Normalized');
                       
axes('Parent', S.Startability_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('startability.bmp') 
%% grade ability panel

S.Gradeability_panel = uipanel('Units','Centimeters',...
                               'Position',[0.1 9.5 9 2],...
                               'backgroundcolor','w',...
                               'Units','Normalized',...
                               'BorderWidth',2,...
                               'BorderType','Line',...
                               'FontSize',11,...
                               'FontUnits','Normalized',...
                               'FontWeight','bold',...
                               'Title','Grade ability',...
                               'highlightcolor','k');
                      
S.enable_gradeability_toggle = uicontrol(S.Gradeability_panel,...
                                        'Style','toggle',...
                                        'Units','Normalized',...
                                        'Position',[0.01 0.12 0.15 0.99],...
                                        'String','Deselected',...
                                        'Fontweight','bold',...
                                        'FontSize',7,...
                                        'FontUnits','Normalized',...
                                        'Callback',@enable_gradeability_callback);  

axes('Parent', S.Gradeability_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('pente.bmp') 

%% Acceleration panel

S.Acceleration_panel = uipanel('Units','Centimeters',...
                               'Position',[0.1 7.5 9 2],...
                               'backgroundcolor','w',...
                               'Units','Normalized',...
                               'BorderWidth',2,...
                               'BorderType','Line',...
                               'FontSize',11,...
                               'FontUnits','Normalized',...
                               'FontWeight','bold',...
                               'Title','Acceleration capability',...
                               'highlightcolor','k');

S.enable_acceleration_toggle = uicontrol(S.Acceleration_panel,...
                                        'Style','toggle',...
                                        'Units','Normalized',...
                                        'Position',[0.01 0.12 0.15 0.99],...
                                        'String','Deselected',...
                                        'Fontweight','bold',...
                                        'FontSize',7,...
                                        'FontUnits','Normalized',...
                                        'Callback',@enable_acceleration_callback);  
                      
axes('Parent', S.Acceleration_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('acceleration.bmp') 

%% Overtaking panel

S.Overtaking_panel = uipanel('Units','Centimeters',...
                               'Position',[0.1 5.5 9 2],...
                            'backgroundcolor','w',...
                            'Units','Normalized',...
                            'BorderWidth',2,...
                            'BorderType','Line',...
                            'FontSize',11,...
                            'FontUnits','Normalized',...
                            'FontWeight','bold',...
                            'Title','Overtaking position',...
                            'highlightcolor','k');
                      
S.enable_overtaking_toggle = uicontrol(S.Overtaking_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_overtaking_callback);

axes('parent',S.Overtaking_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('overtaking.bmp') 

%% Tracking ability panel 

S.Tracking_panel = uipanel('Units','Centimeters',...
                           'Position',[0.1 3.5 9 2],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'FontSize',11,...
                           'FontUnits','Normalized',...
                           'FontWeight','bold',...
                           'Title','Tracking Ability on a Straight Path',...
                           'highlightcolor','k');

S.enable_tracking_toggle = uicontrol(S.Tracking_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_tracking_callback);

axes('Parent',S.Tracking_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('straight.bmp') 

%% Directional Stability panel

S.Directional_panel = uipanel('Units','Centimeters',...
                              'Position',[0.1 1.5 9 2],...
                              'backgroundcolor','w',...
                              'Units','Normalized',...
                              'BorderWidth',2,...
                              'BorderType','Line',...
                              'FontSize',11,...
                              'FontUnits','Normalized',...
                              'FontWeight','bold',...
                              'Title','Directional Stability Under Braking',...
                              'highlightcolor','k');


S.enable_directional_toggle = uicontrol(S.Directional_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_directional_callback);

S.ABS_checkbox = uicontrol(S.Directional_panel,...
                                       'Style','checkbox',...
                                       'Units','Normalized',...
                                       'Position',[0.5 0.25 0.1 0.15],...
                                       'backgroundcolor','w',...
                                       'Enable','off',...
                                       'Value',1);                        

S.ABS_text = uicontrol(S.Directional_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Anti-lock braking control',...
                               'FontSize',8,...
                               'FontUnits','Normalized'); 
                           
axes('Parent',S.Directional_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('stop.bmp') 
%% Ride quality panel

S.Ridequality_panel = uipanel('Units','Centimeters',...
                              'Position',[12 13.5 9 2],...
                              'backgroundcolor','w',...
                              'Units','Normalized',...
                              'BorderWidth',2,...
                              'BorderType','Line',...
                              'FontSize',11,...
                              'FontUnits','Normalized',...
                              'FontWeight','bold',...
                              'Title','Ride quality',...
                              'highlightcolor','k');

S.ridequality_popupmenu = uicontrol(S.Ridequality_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist2,...
                                    'FontSize', 8,...
                                'FontUnits','Normalized');                                                                     
                         
S.ridequality_text = uicontrol(S.Ridequality_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Road file',...
                               'FontSize',8,...
                               'FontUnits','Normalized'); 
                        
S.enable_ridequality_toggle = uicontrol(S.Ridequality_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_ridequality_callback);
                                   
axes('Parent',S.Ridequality_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('ridequality.bmp') 

%% Sweptpath panel

S.Sweptpath_panel = uipanel('Units','Centimeters',...
                            'Position',[12 11.5 9 2],...
                            'backgroundcolor','w',...
                            'Units','Normalized',...
                            'BorderWidth',2,...
                            'BorderType','Line',...
                            'FontSize',11,...
                            'FontUnits','Normalized',...
                            'FontWeight','bold',...
                            'Title','Low-Speed Swept Path',...
                            'highlightcolor','k');
                      
S.enable_sweptpath_toggle = uicontrol(S.Sweptpath_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_sweptpath_callback);

axes('Parent',S.Sweptpath_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('virage.bmp') 

%% Sweptpath 360 panel

S.Sweptpath360_panel = uipanel('Units','Centimeters',...
                               'Position',[12 9.5 9 2],...
                               'backgroundcolor','w',...
                               'Units','Normalized',...
                               'BorderWidth',2,...
                               'BorderType','Line',...
                               'FontSize',11,...
                               'FontUnits','Normalized',...
                               'FontWeight','bold',...
                               'Title','Low-Speed Swept Path 360',...
                                'highlightcolor','k');
                      
S.enable_sweptpath360_toggle = uicontrol(S.Sweptpath360_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_sweptpath360_callback);
                                          
axes('Parent',S.Sweptpath360_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('virage.bmp') 

%% Frontal swing panel

S.Frontalswing_panel = uipanel('Units','Centimeters',...
                               'Position',[12 7.5 9 2],...
                               'backgroundcolor','w',...
                               'Units','Normalized',...
                               'BorderWidth',2,...
                               'BorderType','Line',...
                               'FontSize',11,...
                               'FontUnits','Normalized',...
                               'FontWeight','bold',...
                               'Title','Frontal swing',...
                               'highlightcolor','k');
                      
S.enable_Frontalswing_toggle = uicontrol(S.Frontalswing_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_frontalswing_callback);
                     
axes('Parent',S.Frontalswing_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('virage.bmp') 

%% Tail swing panel

S.Tailswing_panel = uipanel('Units','Centimeters',...
                            'Position',[12 5.5 9 2],...
                            'backgroundcolor','w',...
                            'Units','Normalized',...
                            'BorderWidth',2,...
                            'BorderType','Line',...
                            'FontSize',11,...
                            'FontUnits','Normalized',...
                            'FontWeight','bold',...
                            'Title','Tail swing',...
                            'highlightcolor','k');
                      
S.enable_Tailswing_toggle = uicontrol(S.Tailswing_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_tailswing_callback);

axes('Parent',S.Tailswing_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('virage.bmp') 

%% Tyre friction panel

S.Tyrefriction_panel = uipanel('Units','Centimeters',...
                              'Position',[12 3.5 9 2],...
                              'backgroundcolor','w',...
                              'Units','Normalized',...
                              'BorderWidth',2,...
                              'BorderType','Line',...
                              'FontSize',11,...
                              'FontUnits','Normalized',...
                              'FontWeight','bold',...
                              'Title','Steer-Tyre Friction Demand',...
                              'highlightcolor','k');
                      
S.enable_Tyrefriction_toggle = uicontrol(S.Tyrefriction_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_tyrefriction_callback);

axes('Parent',S.Tyrefriction_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('tyrefriction.bmp') 

%% Side wind panel

S.Sidewind_panel = uipanel('Units','Centimeters',...
                           'Position',[12 1.5 9 2],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'FontSize',11,...
                           'FontUnits','Normalized',...
                           'FontWeight','bold',...
                           'Title','Sidewind',...
                           'highlightcolor','k');

S.windspeed_edit = uicontrol(S.Sidewind_panel,...
                             'style','edit',...
                             'BackgroundColor','w',...
                             'String','50',...
                             'FontSize',8,...
                             'FontUnits','Normalized',...
                             'units','normalized',...
                             'enable','off',...
                             'position',[0.55 0.25 0.1 0.25],...
                             'Callback',@windspeed_edit_callback);
                
S.windspeed_text = uicontrol(S.Sidewind_panel,...
                             'Style','text',...
                             'Units','Normalized',...
                             'Position',[0.4 0.6 0.4 0.2],...
                             'backgroundcolor','w',...
                             'String','Velocity (km/h)',...
                             'FontSize', 8,...
                             'FontUnits','Normalized');

 S.windangle_edit = uicontrol(S.Sidewind_panel,...
                              'style','edit',...
                              'BackgroundColor','w',...
                              'String','0',...
                              'FontSize',8,...
                              'FontUnits','Normalized',...
                              'units','normalized',...
                              'enable','off',...
                              'position',[0.25 0.25 0.1 0.25],...
                              'Callback',@windangle_edit_callback);
                
S.windangle_text = uicontrol(S.Sidewind_panel,...
                             'Style','text',...
                             'Units','Normalized',...
                             'Position',[0.2 0.6 0.2 0.2],...
                             'backgroundcolor','w',...
                             'String','Angle (deg)',...
                             'FontSize', 8,...
                             'FontUnits','Normalized');
                         
S.enable_Sidewind_toggle = uicontrol(S.Sidewind_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_sidewind_callback);

%% Turn 90R8 panel

S.Turn90R8_panel = uipanel('Units','Centimeters',...
                           'Position',[22.9 13.5 9 2],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'FontSize',11,...
                           'FontUnits','Normalized',...
                           'FontWeight','bold',...
                           'Title','90 deg Turn R8',...
                           'highlightcolor','k');
                      
S.enable_Turn90R8_toggle = uicontrol(S.Turn90R8_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_turn90R8_callback);

axes('Parent',S.Turn90R8_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('tyrefriction.bmp') 

%% Rollover panel

S.Rollover_panel = uipanel('Units','Centimeters',...
                           'Position',[22.9 11.5 9 2],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'FontSize',11,...
                           'FontUnits','Normalized',...
                           'FontWeight','bold',...
                           'Title','Static Rollover Threshold',...
                           'highlightcolor','k');
                      
S.rollovervel_edit = uicontrol(S.Rollover_panel,...
                               'style','edit',...
                               'BackgroundColor','w',...
                               'String','40',...
                               'FontSize',8,...
                               'FontUnits','Normalized',...
                               'units','normalized',...
                               'enable','off',...
                               'position',[0.5 0.25 0.1 0.25],...
                               'Callback',@rollovervelocity_edit_callback);
                
S.Rollover_text = uicontrol(S.Rollover_panel,...
                            'Style','text',...
                            'Units','Normalized',...
                            'Position',[0.45 0.6 0.2 0.2],...
                            'backgroundcolor','w',...
                            'String','Velocity (km/h)',...
                            'FontSize', 8,...
                            'FontUnits','Normalized');
                         
S.enable_Rollover_toggle = uicontrol(S.Rollover_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_rollover_callback);

axes('Parent',S.Rollover_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('rollover.bmp') 

%% Rearward amplification panel

S.Rearward_panel = uipanel('Units','Centimeters',...
                           'Position',[22.9 9.5 9 2],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'FontSize',11,...
                           'FontUnits','Normalized',...
                           'FontWeight','bold',...
                           'Title','Rearward amplification',...
                           'highlightcolor','k');
                      
S.enable_Rearward_toggle = uicontrol(S.Rearward_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_rearward_callback);

S.rearwardampliamplitude_edit = uicontrol(S.Rearward_panel,...
                                         'style','edit',...
                                         'BackgroundColor','w',...
                                         'String','20',...
                                         'FontSize',8,...
                                         'FontUnits','Normalized',...
                                         'units','normalized',...
                                         'Enable','off',...
                                         'position',[0.43 0.3 0.1 0.25],...
                                         'Callback',@rearwardamplitude_edit_callback);
                    
S.amplitude_text = uicontrol(S.Rearward_panel,...
                             'Style','text',...
                             'Units','Normalized',...
                             'Position',[0.35 0.6 0.25 0.35],...
                             'backgroundcolor','w',...
                             'String','Amplitude of steering wheel (deg)',...
                             'FontSize', 8,...
                             'FontUnits','Normalized');  
                         
axes('Parent',S.Rearward_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('singlesine.bmp') 

%% Offtracking panel

S.Offtracking_panel = uipanel('Units','Centimeters',...
                              'Position',[22.9 7.5 9 2],...
                              'backgroundcolor','w',...
                              'Units','Normalized',...
                              'BorderWidth',2,...
                              'BorderType','Line',...
                              'FontSize',11,...
                              'FontUnits','Normalized',...
                              'FontWeight','bold',...
                              'Title','High-Speed Transient Offtracking',...
                              'highlightcolor','k');                      

 S.offtrackingamplitude_edit = uicontrol(S.Offtracking_panel,...
                                         'style','edit',...
                                         'BackgroundColor','w',...
                                         'String','30',...
                                         'FontSize',8,...
                                         'FontUnits','Normalized',...
                                         'units','normalized',...
                                         'Enable','off',...
                                         'position',[0.5 0.3 0.2 0.2],...
                                         'Callback',@yawdamping_edit_callback);
                
S.offtracking_text = uicontrol(S.Offtracking_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.45 0.6 0.3 0.4],...
                               'backgroundcolor','w',...
                               'String','Amplitude of steering wheel (deg)',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');  
                         
S.enable_Offtracking_toggle = uicontrol(S.Offtracking_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_offtracking_callback);

axes('Parent',S.Offtracking_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('singlesine.bmp') 

%% Yawdamping panel

S.Yawdamping_panel = uipanel('Units','Centimeters',...
                             'Position',[22.9 5.5 9 2],...
                             'backgroundcolor','w',...
                             'Units','Normalized',...
                             'BorderWidth',2,...
                             'BorderType','Line',...
                             'FontSize',11,...
                             'FontUnits','Normalized',...
                             'FontWeight','bold',...
                             'Title','Yaw Damping Coefficient',...
                             'highlightcolor','k'); 

S.Yawdamping_edit = uicontrol(S.Yawdamping_panel,...
                              'style','edit',...
                              'BackgroundColor','w',...
                              'String','35',...
                              'FontSize',8,...
                              'FontUnits','Normalized',...
                              'units','normalized',...
                              'Enable','off',...
                              'position',[0.55 0.25 0.1 0.25]);
                
S.Yawdamping_text = uicontrol(S.Yawdamping_panel,...
                             'Style','text',...
                             'Units','Normalized',...
                             'Position',[0.4 0.6 0.4 0.2],...
                             'backgroundcolor','w',...
                             'String','Amplitude (deg)',...
                             'FontSize', 8,...
                             'FontUnits','Normalized');
                         
S.enable_Yawdamping_toggle = uicontrol(S.Yawdamping_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_yawdamping_callback);

axes('Parent',S.Yawdamping_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('yawdamping.bmp') 

%% Handling quality panel

S.handling_panel = uipanel('Units','Centimeters',...
                           'Position',[22.9 3.5 9 2],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'FontSize',12,...
                           'FontUnits','Normalized',...
                           'FontWeight','bold',...
                           'Title','Handling Quality',...
                           'highlightcolor','k'); 

S.enable_Handling_toggle = uicontrol(S.handling_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_handling_callback);
                      
axes('Parent',S.handling_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
      'xtick',[],'ytick',[]);
imshow('volant.bmp') 
                
%%
set(S.f,'visible','on');                
pause(1)
figure(S.f)
robot = java.awt.Robot; 
robot.keyPress(java.awt.event.KeyEvent.VK_ALT);      %// send ALT
robot.keyPress(java.awt.event.KeyEvent.VK_SPACE);    %// send SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_SPACE);  %// release SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);    %// release ALT
robot.keyPress(java.awt.event.KeyEvent.VK_X);        %// send X
robot.keyRelease(java.awt.event.KeyEvent.VK_X);      %// release X

function select_all_callback(source,eventdata)
global S

selected = get(S.select_all_toggle, 'value');

if selected
    set(S.select_all_toggle,'String','Deselect all');
    set(S.select_all_toggle,'BackgroundColor','g');

    set(S.enable_startability_toggle,'String','Selected');
    set(S.enable_startability_toggle,'BackgroundColor','g');
    set(S.enable_startability_toggle,'value',1);
    set(S.Startability_check,'Enable','on');
    
    set(S.enable_gradeability_toggle,'String','Selected');
    set(S.enable_gradeability_toggle,'BackgroundColor','g');
    set(S.enable_gradeability_toggle,'value',1);
    
    set(S.enable_acceleration_toggle,'String','Selected');
    set(S.enable_acceleration_toggle,'BackgroundColor','g');
    set(S.enable_acceleration_toggle,'value',1);
    
    set(S.enable_overtaking_toggle,'String','Selected');
    set(S.enable_overtaking_toggle,'BackgroundColor','g');
    set(S.enable_overtaking_toggle,'value',1);
    
    set(S.enable_tracking_toggle,'String','Selected');
    set(S.enable_tracking_toggle,'BackgroundColor','g');
    set(S.enable_tracking_toggle,'value',1);
    
    set(S.enable_directional_toggle,'String','Selected');
    set(S.enable_directional_toggle,'BackgroundColor','g');
    set(S.enable_directional_toggle,'value',1);
    set(S.ABS_checkbox,'Enable','on');
    
    set(S.enable_ridequality_toggle,'String','Selected');
    set(S.enable_ridequality_toggle,'BackgroundColor','g');
    set(S.enable_ridequality_toggle,'value',1);
    set(S.ridequality_popupmenu,'Enable','on');
    
    set(S.enable_sweptpath_toggle,'String','Selected');
    set(S.enable_sweptpath_toggle,'BackgroundColor','g');
    set(S.enable_sweptpath_toggle,'value',1);
    
    set(S.enable_sweptpath360_toggle,'String','Selected');
    set(S.enable_sweptpath360_toggle,'BackgroundColor','g');
    set(S.enable_sweptpath360_toggle,'value',1);
    
    set(S.enable_Frontalswing_toggle,'String','Selected');
    set(S.enable_Frontalswing_toggle,'BackgroundColor','g');
    set(S.enable_Frontalswing_toggle,'value',1);
    
    set(S.enable_Tailswing_toggle,'String','Selected');
    set(S.enable_Tailswing_toggle,'BackgroundColor','g');
    set(S.enable_Tailswing_toggle,'value',1);
    
    set(S.enable_Tyrefriction_toggle,'String','Selected');
    set(S.enable_Tyrefriction_toggle,'BackgroundColor','g');
    set(S.enable_Tyrefriction_toggle,'value',1);
    
    set(S.enable_Sidewind_toggle,'String','Selected');
    set(S.enable_Sidewind_toggle,'BackgroundColor','g');
    set(S.enable_Sidewind_toggle,'value',1);
    set(S.windspeed_edit,'Enable','on');
    set(S.windangle_edit,'Enable','on');
    
    set(S.enable_Turn90R8_toggle,'String','Selected');
    set(S.enable_Turn90R8_toggle,'BackgroundColor','g');
    set(S.enable_Turn90R8_toggle,'value',1);
    
    set(S.enable_Rollover_toggle,'String','Selected');
    set(S.enable_Rollover_toggle,'BackgroundColor','g');
    set(S.enable_Rollover_toggle,'value',1);
    set(S.rollovervel_edit,'Enable','on');
    
    set(S.enable_Rearward_toggle,'String','Selected');
    set(S.enable_Rearward_toggle,'BackgroundColor','g');
    set(S.enable_Rearward_toggle,'value',1);
    set(S.rearwardampliamplitude_edit,'Enable','on');
    
    set(S.enable_Offtracking_toggle,'String','Selected');
    set(S.enable_Offtracking_toggle,'BackgroundColor','g');
    set(S.enable_Offtracking_toggle,'value',1);
    set(S.offtrackingamplitude_edit,'Enable','on');
    
    set(S.enable_Yawdamping_toggle,'String','Selected');
    set(S.enable_Yawdamping_toggle,'BackgroundColor','g');
    set(S.enable_Yawdamping_toggle,'value',1);
    set(S.Yawdamping_edit,'Enable','on');
    
    set(S.enable_Handling_toggle,'String','Selected');
    set(S.enable_Handling_toggle,'BackgroundColor','g');
    set(S.enable_Handling_toggle,'value',1);

    set(S.enable_CRG_toggle,'String','Selected');
    set(S.enable_CRG_toggle,'BackgroundColor','g');
    set(S.enable_CRG_toggle,'value',1);   
    set(S.CRG_preview,'Enable','on');
    set(S.CRG_Road,'Enable','on');
    set(S.CRG_edit,'Enable','on');
    
else
    set(S.select_all_toggle,'String','Select all');
    set(S.select_all_toggle,'BackgroundColor','default');
    
    set(S.enable_startability_toggle,'String','Deselected');
    set(S.enable_startability_toggle,'BackgroundColor','default');
    set(S.enable_startability_toggle,'value',0);
    set(S.Startability_check,'Enable','off');
    
    set(S.enable_gradeability_toggle,'String','Deselected');
    set(S.enable_gradeability_toggle,'BackgroundColor','default');  
    set(S.enable_gradeability_toggle,'value',0);
    
    set(S.enable_acceleration_toggle,'String','Deselected');
    set(S.enable_acceleration_toggle,'BackgroundColor','default');
    set(S.enable_acceleration_toggle,'value',0);
    
    set(S.enable_overtaking_toggle,'String','Deselected');
    set(S.enable_overtaking_toggle,'BackgroundColor','default');
    set(S.enable_overtaking_toggle,'value',0);
    
    set(S.enable_tracking_toggle,'String','Deselected');
    set(S.enable_tracking_toggle,'BackgroundColor','default');   
    set(S.enable_tracking_toggle,'value',0);
    
    set(S.enable_directional_toggle,'String','Deselected');
    set(S.enable_directional_toggle,'BackgroundColor','default');
    set(S.enable_directional_toggle,'value',0);
    set(S.ABS_checkbox,'Enable','off');
    
    set(S.enable_ridequality_toggle,'String','Deselected');
    set(S.enable_ridequality_toggle,'BackgroundColor','default');
    set(S.enable_ridequality_toggle,'value',0);
    set(S.ridequality_popupmenu,'Enable','off');
    
    set(S.enable_sweptpath_toggle,'String','Deselected');
    set(S.enable_sweptpath_toggle,'BackgroundColor','default');
    set(S.enable_sweptpath_toggle,'value',0);
    
    set(S.enable_sweptpath360_toggle,'String','Deselected');
    set(S.enable_sweptpath360_toggle,'BackgroundColor','default');
    set(S.enable_sweptpath360_toggle,'value',0);
    
    set(S.enable_Frontalswing_toggle,'String','Deselected');
    set(S.enable_Frontalswing_toggle,'BackgroundColor','default');
    set(S.enable_Frontalswing_toggle,'value',0);
    
    set(S.enable_Tailswing_toggle,'String','Deselected');
    set(S.enable_Tailswing_toggle,'BackgroundColor','default');
    set(S.enable_Tailswing_toggle,'value',0);
    
    set(S.enable_Tyrefriction_toggle,'String','Deselected');
    set(S.enable_Tyrefriction_toggle,'BackgroundColor','default');
    set(S.enable_Tyrefriction_toggle,'value',0);
    
    set(S.enable_Sidewind_toggle,'String','Deselected');
    set(S.enable_Sidewind_toggle,'BackgroundColor','default');
    set(S.enable_Sidewind_toggle,'value',0);
    set(S.windspeed_edit,'Enable','off');
    set(S.windangle_edit,'Enable','off');
    
    set(S.enable_Turn90R8_toggle,'String','Deselected');
    set(S.enable_Turn90R8_toggle,'BackgroundColor','default');
    set(S.enable_Turn90R8_toggle,'value',0);
    
    set(S.enable_Rollover_toggle,'String','Deselected');
    set(S.enable_Rollover_toggle,'BackgroundColor','default');
    set(S.enable_Rollover_toggle,'value',0);
    set(S.rollovervel_edit,'Enable','off');
    
    set(S.enable_Rearward_toggle,'String','Deselected');
    set(S.enable_Rearward_toggle,'BackgroundColor','default');
    set(S.enable_Rearward_toggle,'value',0);
    set(S.rearwardampliamplitude_edit,'Enable','off');
    
    set(S.enable_Offtracking_toggle,'String','Deselected');
    set(S.enable_Offtracking_toggle,'BackgroundColor','default');
    set(S.enable_Offtracking_toggle,'value',0);
    set(S.offtrackingamplitude_edit,'Enable','off');
    
    set(S.enable_Yawdamping_toggle,'String','Deselected');
    set(S.enable_Yawdamping_toggle,'BackgroundColor','default');
    set(S.enable_Yawdamping_toggle,'value',0);
    set(S.Yawdamping_edit,'Enable','off');
    
    set(S.enable_Handling_toggle,'String','Deselected');
    set(S.enable_Handling_toggle,'BackgroundColor','default');
    set(S.enable_Handling_toggle,'value',0);
    
    set(S.enable_CRG_toggle,'String','Deselected');
    set(S.enable_CRG_toggle,'BackgroundColor','default');
    set(S.enable_CRG_toggle,'value',0);       
    set(S.CRG_preview,'Enable','off');
    set(S.CRG_Road,'Enable','off');
    set(S.CRG_edit,'Enable','off');
end

function enable_startability_callback(source,eventdata)
global S

selected = get(S.enable_startability_toggle, 'value');

if selected
    set(S.enable_startability_toggle,'String','Selected');
    set(S.enable_startability_toggle,'BackgroundColor','g');
    set(S.Startability_check,'Enable','on');
else
    set(S.enable_startability_toggle,'String','Deselected');
    set(S.enable_startability_toggle,'BackgroundColor','default');
    set(S.Startability_check,'Enable','off');
end

function enable_gradeability_callback(source,eventdata)
global S

selected = get(S.enable_gradeability_toggle, 'value');

if selected
    set(S.enable_gradeability_toggle,'String','Selected');
    set(S.enable_gradeability_toggle,'BackgroundColor','g');
else
    set(S.enable_gradeability_toggle,'String','Deselected');
    set(S.enable_gradeability_toggle,'BackgroundColor','default');
end

function enable_acceleration_callback(source,eventdata)
global S

selected = get(S.enable_acceleration_toggle, 'value');

if selected
    set(S.enable_acceleration_toggle,'String','Selected');
    set(S.enable_acceleration_toggle,'BackgroundColor','g');
else
    set(S.enable_acceleration_toggle,'String','Deselected');
    set(S.enable_acceleration_toggle,'BackgroundColor','default');
end

function enable_overtaking_callback(source,eventdata)
global S

selected = get(S.enable_overtaking_toggle, 'value');

if selected
    set(S.enable_overtaking_toggle,'String','Selected');
    set(S.enable_overtaking_toggle,'BackgroundColor','g');
else
    set(S.enable_overtaking_toggle,'String','Deselected');
    set(S.enable_overtaking_toggle,'BackgroundColor','default');
end

function enable_tracking_callback(source,eventdata)
global S

selected = get(S.enable_tracking_toggle, 'value');

if selected
    set(S.enable_tracking_toggle,'String','Selected');
    set(S.enable_tracking_toggle,'BackgroundColor','g');
else
    set(S.enable_tracking_toggle,'String','Deselected');
    set(S.enable_tracking_toggle,'BackgroundColor','default');
end

function enable_directional_callback(source,eventdata)
global S

selected = get(S.enable_directional_toggle, 'value');

if selected
    set(S.enable_directional_toggle,'String','Selected');
    set(S.enable_directional_toggle,'BackgroundColor','g');
    set(S.ABS_checkbox,'Enable','on');
else
    set(S.enable_directional_toggle,'String','Deselected');
    set(S.enable_directional_toggle,'BackgroundColor','default');
    set(S.ABS_checkbox,'Enable','off');
end

function enable_ridequality_callback(source,eventdata)
global S

selected = get(S.enable_ridequality_toggle, 'value');

if selected
    set(S.enable_ridequality_toggle,'String','Selected');
    set(S.enable_ridequality_toggle,'BackgroundColor','g');
    set(S.ridequality_popupmenu,'Enable','on');
else
    set(S.enable_ridequality_toggle,'String','Deselected');
    set(S.enable_ridequality_toggle,'BackgroundColor','default');
    set(S.ridequality_popupmenu,'Enable','off');
end

function enable_sweptpath_callback(source,eventdata)
global S

selected = get(S.enable_sweptpath_toggle, 'value');

if selected
    set(S.enable_sweptpath_toggle,'String','Selected');
    set(S.enable_sweptpath_toggle,'BackgroundColor','g');
else
    set(S.enable_sweptpath_toggle,'String','Deselected');
    set(S.enable_sweptpath_toggle,'BackgroundColor','default');
end

function enable_sweptpath360_callback(source,eventdata)
global S

selected = get(S.enable_sweptpath360_toggle, 'value');

if selected
    set(S.enable_sweptpath360_toggle,'String','Selected');
    set(S.enable_sweptpath360_toggle,'BackgroundColor','g');
else
    set(S.enable_sweptpath360_toggle,'String','Deselected');
    set(S.enable_sweptpath360_toggle,'BackgroundColor','default');
end

function enable_frontalswing_callback(source,eventdata)
global S

selected = get(S.enable_Frontalswing_toggle, 'value');

if selected
    set(S.enable_Frontalswing_toggle,'String','Selected');
    set(S.enable_Frontalswing_toggle,'BackgroundColor','g');
else
    set(S.enable_Frontalswing_toggle,'String','Deselected');
    set(S.enable_Frontalswing_toggle,'BackgroundColor','default');
end

function enable_tailswing_callback(source,eventdata)
global S

selected = get(S.enable_Tailswing_toggle, 'value');

if selected
    set(S.enable_Tailswing_toggle,'String','Selected');
    set(S.enable_Tailswing_toggle,'BackgroundColor','g');
else
    set(S.enable_Tailswing_toggle,'String','Deselected');
    set(S.enable_Tailswing_toggle,'BackgroundColor','default');
end

function enable_tyrefriction_callback(source,eventdata)
global S

selected = get(S.enable_Tyrefriction_toggle, 'value');

if selected
    set(S.enable_Tyrefriction_toggle,'String','Selected');
    set(S.enable_Tyrefriction_toggle,'BackgroundColor','g');
else
    set(S.enable_Tyrefriction_toggle,'String','Deselected');
    set(S.enable_Tyrefriction_toggle,'BackgroundColor','default');
end

function enable_sidewind_callback(source,eventdata)
global S

selected = get(S.enable_Sidewind_toggle, 'value');

if selected
    set(S.enable_Sidewind_toggle,'String','Selected');
    set(S.enable_Sidewind_toggle,'BackgroundColor','g');
    set(S.windspeed_edit,'Enable','on');
    set(S.windangle_edit,'Enable','on');
else
    set(S.enable_Sidewind_toggle,'String','Deselected');
    set(S.enable_Sidewind_toggle,'BackgroundColor','default');
    set(S.windspeed_edit,'Enable','off');
    set(S.windangle_edit,'Enable','off');
end

function enable_turn90R8_callback(source,eventdata)
global S

selected = get(S.enable_Turn90R8_toggle, 'value');

if selected
    set(S.enable_Turn90R8_toggle,'String','Selected');
    set(S.enable_Turn90R8_toggle,'BackgroundColor','g');
else
    set(S.enable_Turn90R8_toggle,'String','Deselected');
    set(S.enable_Turn90R8_toggle,'BackgroundColor','default');
end

function enable_rollover_callback(source,eventdata)
global S

selected = get(S.enable_Rollover_toggle, 'value');

if selected
    set(S.enable_Rollover_toggle,'String','Selected');
    set(S.enable_Rollover_toggle,'BackgroundColor','g');
    set(S.rollovervel_edit,'Enable','on');
else
    set(S.enable_Rollover_toggle,'String','Deselected');
    set(S.enable_Rollover_toggle,'BackgroundColor','default');
    set(S.rollovervel_edit,'Enable','off');
end

function enable_rearward_callback(source,eventdata)
global S

selected = get(S.enable_Rearward_toggle, 'value');

if selected
    set(S.enable_Rearward_toggle,'String','Selected');
    set(S.enable_Rearward_toggle,'BackgroundColor','g');
    set(S.rearwardampliamplitude_edit,'Enable','on');
else
    set(S.enable_Rearward_toggle,'String','Deselected');
    set(S.enable_Rearward_toggle,'BackgroundColor','default');
    set(S.rearwardampliamplitude_edit,'Enable','off');
end

function rollover_results_check(source,eventdata)
global S
selected = get(S.rolloverresults_checkbox, 'value');

if selected
    set(S.rollover_popupmenu,'Enable','on');
else
    set(S.rollover_popupmenu,'Enable','off');
end

function enable_offtracking_callback(source,eventdata)
global S

selected = get(S.enable_Offtracking_toggle, 'value');

if selected
    set(S.enable_Offtracking_toggle,'String','Selected');
    set(S.enable_Offtracking_toggle,'BackgroundColor','g');
    set(S.offtrackingamplitude_edit,'Enable','on');
else
    set(S.enable_Offtracking_toggle,'String','Deselected');
    set(S.enable_Offtracking_toggle,'BackgroundColor','default');
    set(S.offtrackingamplitude_edit,'Enable','off');
end

function enable_yawdamping_callback(source,eventdata)
global S

selected = get(S.enable_Yawdamping_toggle, 'value');

if selected
    set(S.enable_Yawdamping_toggle,'String','Selected');
    set(S.enable_Yawdamping_toggle,'BackgroundColor','g');
    set(S.Yawdamping_edit,'Enable','on');
else
    set(S.enable_Yawdamping_toggle,'String','Deselected');
    set(S.enable_Yawdamping_toggle,'BackgroundColor','default');
    set(S.Yawdamping_edit,'Enable','off');
end

function enable_handling_callback(source,eventdata)
global S

selected = get(S.enable_Handling_toggle, 'value');

if selected
    set(S.enable_Handling_toggle,'String','Selected');
    set(S.enable_Handling_toggle,'BackgroundColor','g');
else
    set(S.enable_Handling_toggle,'String','Deselected');
    set(S.enable_Handling_toggle,'BackgroundColor','default');
end

function enable_CRG_callback(source,eventdata)
global S

selected = get(S.enable_CRG_toggle, 'value');

if selected
    set(S.enable_CRG_toggle,'String','Selected');
    set(S.enable_CRG_toggle,'BackgroundColor','g');
    set(S.CRG_preview,'Enable','on');
    set(S.CRG_Road,'Enable','on');
    set(S.CRG_edit,'Enable','on');
else
    set(S.enable_CRG_toggle,'String','Deselected');
    set(S.enable_CRG_toggle,'BackgroundColor','default');
    set(S.CRG_preview,'Enable','off');
    set(S.CRG_Road,'Enable','off');
    set(S.CRG_edit,'Enable','off');
end

function Back_callback(source,eventdata)  
global S

S.hWait = figure('NumberTitle','off','Name','LHV Tool',...
             'color','w','toolbar','none','menubar','none','Units','Normalized',...
             'Position',[0.2 0.15 0.8 0.75]);  
pause(0.5)         
robot = java.awt.Robot; 
robot.keyPress(java.awt.event.KeyEvent.VK_ALT);      %// send ALT
robot.keyPress(java.awt.event.KeyEvent.VK_SPACE);    %// send SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_SPACE);  %// release SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);    %// release ALT
robot.keyPress(java.awt.event.KeyEvent.VK_X);        %// send X
robot.keyRelease(java.awt.event.KeyEvent.VK_X);      %// release X         
         
iconsClassName = 'com.mathworks.widgets.BusyAffordance$AffordanceSize';
iconsSizeEnums = javaMethod('values',iconsClassName);
SIZE_32x32 = iconsSizeEnums(2);  % (1) = 16x16,  (2) = 32x32
jObj = com.mathworks.widgets.BusyAffordance(SIZE_32x32, 'Please wait...');  % icon, label
jObj.setPaintsWhenStopped(true);  % default = false
jObj.useWhiteDots(false);         % default = false (true is good for dark backgrounds)
javacomponent(jObj.getComponent, [850,500,200,100], S.hWait);
jObj.start;   
pause(1)

LHV_TOOL

function simulate_callback(source,eventdata)
hWait = figure('NumberTitle','off','Name','LHV Tool',...
             'color','w','toolbar','none','menubar','none','Units','Normalized',...
             'Position',[0.2 0.15 0.8 0.75]);  
pause(0.5)         
robot = java.awt.Robot; 
robot.keyPress(java.awt.event.KeyEvent.VK_ALT);      %// send ALT
robot.keyPress(java.awt.event.KeyEvent.VK_SPACE);    %// send SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_SPACE);  %// release SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);    %// release ALT
robot.keyPress(java.awt.event.KeyEvent.VK_X);        %// send X
robot.keyRelease(java.awt.event.KeyEvent.VK_X);      %// release X         
         
iconsClassName = 'com.mathworks.widgets.BusyAffordance$AffordanceSize';
iconsSizeEnums = javaMethod('values',iconsClassName);
SIZE_32x32 = iconsSizeEnums(2);  % (1) = 16x16,  (2) = 32x32
jObj = com.mathworks.widgets.BusyAffordance(SIZE_32x32, 'Simulating, please wait...');  % icon, label
jObj.setPaintsWhenStopped(true);  % default = false
jObj.useWhiteDots(false);         % default = false (true is good for dark backgrounds)
javacomponent(jObj.getComponent, [850,500,200,100], hWait);
jObj.start;     
pause(1)

global Excelsave ExcelFileName Truckname num handling_selected yawdamping_selected offtracking_selected rearward_selected 
global Name rollover_selected turn90R8_selected sidewind_selected friction_selected 
global tailswing_selected frontalswing_selected sweptpath360_selected sweptpath_selected 
global ridequality_selected directional_selected tracking_selected overtaking_selected 
global acceleration_selected gradeability_selected startability_selected statics_selected CRG_selected
global static startability gradeability gradeability_speed gradeability_motion acceleration overtaking tracking directional ridequality
global sweptpath sweptpath360 frontalswing tailswing steertyrefriction turn90R8 sidewind rollover
global rearward offtracking yawdamping handling wheelbase results friction_coeff
global name name_rear_roll custom simulation S start_window grade indice width roadfile2 roadfile wangle wspeed velro rolloverresults amplra filename amplo amply
global CRG_sim CRG_wrl velCRG
start_window=0;
results = 0;
custom = 1;
if Excelsave == 1
    fid = fopen(ExcelFileName, 'a');
    if fid ~= -1
        fclose(fid);
    else
        while (fid == -1)
            errormsg = strcat('the file: ', ExcelFileName, ' is open. please close it!');
            waitfor(msgbox(errormsg,'Error'));
            fid = fopen(ExcelFileName, 'a');
        end
        fclose(fid);
    end
end

Truckname = get(S.Truckname_edit,'String');

friction_coeff=str2double(get(S.friction_edit,'String'));

startability_selected = get(S.enable_startability_toggle, 'value');
gradeability_selected = get(S.enable_gradeability_toggle, 'value');
acceleration_selected = get(S.enable_acceleration_toggle, 'value');
overtaking_selected = get(S.enable_overtaking_toggle, 'value');
tracking_selected = get(S.enable_tracking_toggle, 'value');
directional_selected = get(S.enable_directional_toggle, 'value');
ridequality_selected = get(S.enable_ridequality_toggle, 'value');
sweptpath_selected = get(S.enable_sweptpath_toggle, 'value');
sweptpath360_selected = get(S.enable_sweptpath360_toggle, 'value');
frontalswing_selected = get(S.enable_Frontalswing_toggle, 'value');
tailswing_selected = get(S.enable_Tailswing_toggle, 'value');
friction_selected = get(S.enable_Tyrefriction_toggle, 'value');
sidewind_selected = get(S.enable_Sidewind_toggle, 'value');
turn90R8_selected = get(S.enable_Turn90R8_toggle, 'value');
rollover_selected = get(S.enable_Rollover_toggle, 'value');
rearward_selected = get(S.enable_Rearward_toggle, 'value');
offtracking_selected = get(S.enable_Offtracking_toggle, 'value');
yawdamping_selected = get(S.enable_Yawdamping_toggle, 'value');
handling_selected = get(S.enable_Handling_toggle, 'value');
CRG_selected = get(S.enable_CRG_toggle, 'value');

% if isdir(strcat(['simresults/Statics/LZV_custom/',Truckname])) == 0
%     mkdir(['simresults/Statics/LZV_custom/' Truckname])
%     simulation = 21;
%     run_Statics(Name);
% end

if startability_selected
    if isdir(strcat(['simresults/C1_Startability/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C1_Startability/LZV_custom/' Truckname])
        if (get(S.Startability_check,'Value')==get(S.Startability_check,'Max'))
            ctrl = 1;
        else
            ctrl = 0;
        end
        tic2 = tic;
        grade = 20;     
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C1_Startability/LZV_custom/',Truckname,'/',Truckname,'_anim_startability.slx'])
        copyfile([Name,'.wrl'],['simresults/C1_Startability/LZV_custom/',Truckname,'/',Truckname,'_startability.wrl'])
        copyfile([Name,'.slx'],['simresults/C1_Startability/LZV_custom/',Truckname,'/',Truckname,'_startability.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C1_Startability/LZV_custom/',Truckname])
        pause(2)
        C1_run_Startability(Name,ctrl);
        toc(tic2); 
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if gradeability_selected
    if isdir(strcat(['simresults/C2_Gradeability/Speed/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C2_Gradeability/Speed/LZV_custom/' Truckname])
        tic2=tic;
        indice=1; 
        simulation = 2;
        gradeability_speed = 1;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C2_Gradeability/Speed/LZV_custom/',Truckname,'/',Truckname,'_gradeability_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C2_Gradeability/Speed/LZV_custom/',Truckname,'/',Truckname,'_gradeability.wrl'])
        copyfile([Name,'.slx'],['simresults/C2_Gradeability/Speed/LZV_custom/',Truckname,'/',Truckname,'_gradeability_speed.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C2_Gradeability/Speed/LZV_custom/',Truckname]) 
        pause(2)
        C2_run_Gradeability_speed(Name);
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end
    
    if isdir(strcat(['simresults/C2_Gradeability/Motion/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C2_Gradeability/Motion/LZV_custom/' Truckname])
        tic2=tic;
        indice=1; 
        simulation = 2;
        gradeability_speed = 0;
        gradeability_motion = 1;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C2_Gradeability/Motion/LZV_custom/',Truckname,'/',Truckname,'_gradeability_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C2_Gradeability/Motion/LZV_custom/',Truckname,'/',Truckname,'_gradeability.wrl'])
        copyfile([Name,'.slx'],['simresults/C2_Gradeability/Motion/LZV_custom/',Truckname,'/',Truckname,'_gradeability_motion.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C2_Gradeability/Motion/LZV_custom/',Truckname]) 
        pause(2)
        C2_run_Gradeability_motion(Name);
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if acceleration_selected
    if isdir(strcat(['simresults/C3_Acceleration/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C3_Acceleration/LZV_custom/' Truckname])
        simulation = 3;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C3_Acceleration/LZV_custom/',Truckname,'/',Truckname,'_acceleration_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C3_Acceleration/LZV_custom/',Truckname,'/',Truckname,'_acceleration.wrl'])
        copyfile([Name,'.slx'],['simresults/C3_Acceleration/LZV_custom/',Truckname,'/',Truckname,'_acceleration.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C3_Acceleration/LZV_custom/',Truckname])  
        pause(2)
        C3_run_Acceleration(Name);
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if overtaking_selected
    if isdir(strcat(['simresults/C4_Overtaking/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C4_Overtaking/LZV_custom/' Truckname])
        simulation = 4;
        C4_run_Overtaking('LZV_custom');
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if tracking_selected
    if isdir(strcat(['simresults/C5_TrackingAbility/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C5_TrackingAbility/LZV_custom/' Truckname])
    simulation = 5;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C5_TrackingAbility/LZV_custom/',Truckname,'/',Truckname,'_tracking_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C5_TrackingAbility/LZV_custom/',Truckname,'/',Truckname,'_tracking.wrl'])
        copyfile([Name,'.slx'],['simresults/C5_TrackingAbility/LZV_custom/',Truckname,'/',Truckname,'_tracking.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C5_TrackingAbility/LZV_custom/',Truckname])
        pause(2)
        C5_run_Tracking(Name);  
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if directional_selected
    if isdir(strcat(['simresults/C16_DirectionalStability/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C16_DirectionalStability/LZV_custom/' Truckname])
        if (get(S.ABS_checkbox,'Value')==get(S.ABS_checkbox,'Max'))
            ctrl = 1;
        else
            ctrl = 0;
        end    
        simulation = 16; 
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C16_DirectionalStability/LZV_custom/',Truckname,'/',Truckname,'_directional_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C16_DirectionalStability/LZV_custom/',Truckname,'/',Truckname,'_directional.wrl'])
        copyfile([Name,'.slx'],['simresults/C16_DirectionalStability/LZV_custom/',Truckname,'/',Truckname,'_directional.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C16_DirectionalStability/LZV_custom/',Truckname]) 
        pause(2)
        C16_run_DirectionalStability(Name,ctrl,1);
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if ridequality_selected
    if isdir(strcat(['simresults/C6_RideQuality/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C6_RideQuality/LZV_custom/' Truckname])
        string1=get(S.ridequality_popupmenu,'String');
        value1=get(S.ridequality_popupmenu,'Value');
        roadfile=char(string1(value1));
        simulation = 6;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C6_RideQuality/LZV_custom/',Truckname,'/',Truckname,'_rideability_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C6_RideQuality/LZV_custom/',Truckname,'/',Truckname,'_rideability.wrl'])
        copyfile([Name,'.slx'],['simresults/C6_RideQuality/LZV_custom/',Truckname,'/',Truckname,'_rideability.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C6_RideQuality/LZV_custom/',Truckname])   
        pause(2)
        C6_run_RideQuality(Name);
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if sweptpath_selected
    if isdir(strcat(['simresults/C7_SweptPath/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C7_SweptPath/LZV_custom/' Truckname])
        simulation = 7;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C7_SweptPath/LZV_custom/',Truckname,'/',Truckname,'_anim_sweptpath.slx'])
        copyfile([Name,'.wrl'],['simresults/C7_SweptPath/LZV_custom/',Truckname,'/',Truckname,'_sweptpath.wrl'])
        copyfile([Name,'.slx'],['simresults/C7_SweptPath/LZV_custom/',Truckname,'/',Truckname,'_sweptpath.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C7_SweptPath/LZV_custom/',Truckname])   
        pause(2)
        C7_run_SweptPath(Name);
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if sweptpath360_selected
    if isdir(strcat(['simresults/SweptPath360/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/SweptPath360/LZV_custom/' Truckname])
        simulation = 22;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/SweptPath360/LZV_custom/',Truckname,'/',Truckname,'_sweptpath360_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/SweptPath360/LZV_custom/',Truckname,'/',Truckname,'_sweptpath360.wrl'])
        copyfile([Name,'.slx'],['simresults/SweptPath360/LZV_custom/',Truckname,'/',Truckname,'_sweptpath360.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/SweptPath360/LZV_custom/',Truckname])   
        pause(2)
        run_SweptPath360(Name);  
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if frontalswing_selected
    if isdir(strcat(['simresults/C8_FrontalSwing/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C8_FrontalSwing/LZV_custom/' Truckname])
        simulation = 8;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C8_FrontalSwing/LZV_custom/',Truckname,'/',Truckname,'_frontalswing_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C8_FrontalSwing/LZV_custom/',Truckname,'/',Truckname,'_frontalswing.wrl'])
        copyfile([Name,'.slx'],['simresults/C8_FrontalSwing/LZV_custom/',Truckname,'/',Truckname,'_frontalswing.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C8_FrontalSwing/LZV_custom/',Truckname])    
        pause(2)
        C8_run_FrontalSwing(Name);
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if tailswing_selected
    if isdir(strcat(['simresults/C9_TailSwing/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C9_TailSwing/LZV_custom/' Truckname])
        simulation = 9;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C9_TailSwing/LZV_custom/',Truckname,'/',Truckname,'_tailswing_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C9_TailSwing/LZV_custom/',Truckname,'/',Truckname,'_tailswing.wrl'])
        copyfile([Name,'.slx'],['simresults/C9_TailSwing/LZV_custom/',Truckname,'/',Truckname,'_tailswing.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C9_TailSwing/LZV_custom/',Truckname])  
        pause(2)
        C9_run_TailSwing(Name);
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if friction_selected
    if isdir(strcat(['simresults/C10_TyreFriction/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C10_TyreFriction/LZV_custom/' Truckname])
        simulation = 10;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C10_TyreFriction/LZV_custom/',Truckname,'/',Truckname,'_friction_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C10_TyreFriction/LZV_custom/',Truckname,'/',Truckname,'_friction.wrl'])
        copyfile([Name,'.slx'],['simresults/C10_TyreFriction/LZV_custom/',Truckname,'/',Truckname,'_friction.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C10_TyreFriction/LZV_custom/',Truckname])  
        pause(2)
        C10_run_TyreFriction(Name);
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if turn90R8_selected
    if isdir(strcat(['simresults/Turn90R8/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/Turn90R8/LZV_custom/' Truckname])
        simulation = 23;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/Turn90R8/LZV_custom/',Truckname,'/',Truckname,'_turn90R8_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/Turn90R8/LZV_custom/',Truckname,'/',Truckname,'_turn90R8.wrl'])
        copyfile([Name,'.slx'],['simresults/Turn90R8/LZV_custom/',Truckname,'/',Truckname,'_turn90R8.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/Turn90R8/LZV_custom/',Truckname])  
        pause(2)
        run_Turn90R8(Name);     
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if sidewind_selected
    if isdir(strcat(['simresults/Sidewind/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/Sidewind/LZV_custom/' Truckname])
        wangle=str2double(get(S.windangle_edit,'String'));
        wspeed=str2double(get(S.windspeed_edit,'String'));
        simulation = 24;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/Sidewind/LZV_custom/',Truckname,'/',Truckname,'_sidewind_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/Sidewind/LZV_custom/',Truckname,'/',Truckname,'_sidewind.wrl'])
        copyfile([Name,'.slx'],['simresults/Sidewind/LZV_custom/',Truckname,'/',Truckname,'_sidewind.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/Sidewind/LZV_custom/',Truckname])   
        pause(2)
        run_Sidewind(Name,wangle,wspeed); 
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if rollover_selected
    if isdir(strcat(['simresults/C11_Rollover/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C11_Rollover/LZV_custom/' Truckname])
        velro=str2double(get(S.rollovervel_edit,'String'));
        simulation = 11;   
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C11_Rollover/LZV_custom/',Truckname,'/',Truckname,'_rollover_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C11_Rollover/LZV_custom/',Truckname,'/',Truckname,'_rollover.wrl'])
        copyfile([Name,'.slx'],['simresults/C11_Rollover/LZV_custom/',Truckname,'/',Truckname,'_rollover.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C11_Rollover/LZV_custom/',Truckname])  
        pause(2)
        C11_run_Rollover(Name,velro);    
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if rearward_selected
    if isdir(strcat(['simresults/C12_RearwardAmpli/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C12_RearwardAmpli/LZV_custom/' Truckname])
        amplra=str2double(get(S.rearwardampliamplitude_edit,'String'));
        simulation = 12;  
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C12_RearwardAmpli/LZV_custom/',Truckname,'/',Truckname,'_rearward_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C12_RearwardAmpli/LZV_custom/',Truckname,'/',Truckname,'_rearward.wrl'])
        copyfile([Name,'.slx'],['simresults/C12_RearwardAmpli/LZV_custom/',Truckname,'/',Truckname,'_rearward.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C12_RearwardAmpli/LZV_custom/',Truckname])        
        pause(2)
        C12_run_RearwardAmpli(Name,amplra);   
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
    end            
end

if offtracking_selected
    if isdir(strcat(['simresults/C13_Offtracking/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C13_Offtracking/LZV_custom/' Truckname])
        amplo=str2double(get(S.offtrackingamplitude_edit,'String'));
        simulation = 13;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C13_Offtracking/LZV_custom/',Truckname,'/',Truckname,'_offtracking_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C13_Offtracking/LZV_custom/',Truckname,'/',Truckname,'_offtracking.wrl'])
        copyfile([Name,'.slx'],['simresults/C13_Offtracking/LZV_custom/',Truckname,'/',Truckname,'_offtracking.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C13_Offtracking/LZV_custom/',Truckname])    
        pause(2)
        C13_run_Offtracking(Name,amplo);   
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if yawdamping_selected
    if isdir(strcat(['simresults/C14_YawDamping/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C14_YawDamping/LZV_custom/' Truckname])
        amply=str2double(get(S.Yawdamping_edit,'String'));
        simulation = 14;   
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C14_YawDamping/LZV_custom/',Truckname,'/',Truckname,'_yawdamping_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C14_YawDamping/LZV_custom/',Truckname,'/',Truckname,'_yawdamping.wrl'])
        copyfile([Name,'.slx'],['simresults/C14_YawDamping/LZV_custom/',Truckname,'/',Truckname,'_yawdamping.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C14_YawDamping/LZV_custom/',Truckname])      
        pause(2)
        C14_run_YawDamping(Name,amply);  
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end    
end

if handling_selected
    if isdir(strcat(['simresults/C15_HandlingQuality/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/C15_HandlingQuality/LZV_custom/' Truckname])
        simulation = 15;  
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/C15_HandlingQuality/LZV_custom/',Truckname,'/',Truckname,'_handling_anim.slx'])
        copyfile([Name,'.wrl'],['simresults/C15_HandlingQuality/LZV_custom/',Truckname,'/',Truckname,'_handling.wrl'])
        copyfile([Name,'.slx'],['simresults/C15_HandlingQuality/LZV_custom/',Truckname,'/',Truckname,'_handling.slx'])
        copyfile('model/VRML/gravel.jpg',['simresults/C15_HandlingQuality/LZV_custom/',Truckname])
        pause(2)
        C15_run_HandlingQuality(Name);    
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end
end

if CRG_selected
    if isdir(strcat(['simresults/CRG/LZV_custom/',Truckname])) == 0
        mkdir(['simresults/CRG/LZV_custom/' Truckname])
        string2=get(S.CRG_Road,'String');
        value2=get(S.CRG_Road,'Value');
        roadfile2=char(string2(value2));
        velCRG=str2double(get(S.CRG_edit,'String'));
        simulation = 25;
        fclose('all');
        copyfile([Name,'_anim.slx'],['simresults/CRG/LZV_custom/',Truckname,'/',Truckname,'_anim_CRG.slx'])
        copyfile([Name,'.wrl'],['simresults/CRG/LZV_custom/',Truckname,'/',Truckname,'_CRG.wrl'])
        copyfile([Name,'.slx'],['simresults/CRG/LZV_custom/',Truckname,'/',Truckname,'_CRG.slx'])
        pause(2)
        run_CRG(velCRG); 
    else
        jObj.stop;
        close(hWait)
        errordlg('Foldername already exist, please change the name. Make sure you only use (capital) letters, numbers and/or "_" sign and NO spaces','Foldername already exist')        
        return
    end
end

delete([Name,'_anim.slx'])
delete([Name,'.wrl'])
delete([Name,'.slx'])

closereq;
custom_post_processing

function friction_button_callback(eventdata, source)
hWait = figure('NumberTitle','off','Name','LHV Tool',...
             'color','w','toolbar','none','menubar','none','Units','Normalized',...
             'Position',[0.2 0.15 0.8 0.75]);  
pause(0.5)         
robot = java.awt.Robot; 
robot.keyPress(java.awt.event.KeyEvent.VK_ALT);      %// send ALT
robot.keyPress(java.awt.event.KeyEvent.VK_SPACE);    %// send SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_SPACE);  %// release SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);    %// release ALT
robot.keyPress(java.awt.event.KeyEvent.VK_X);        %// send X
robot.keyRelease(java.awt.event.KeyEvent.VK_X);      %// release X         
         
iconsClassName = 'com.mathworks.widgets.BusyAffordance$AffordanceSize';
iconsSizeEnums = javaMethod('values',iconsClassName);
SIZE_32x32 = iconsSizeEnums(2);  % (1) = 16x16,  (2) = 32x32
jObj = com.mathworks.widgets.BusyAffordance(SIZE_32x32, 'Please wait...');  % icon, label
jObj.setPaintsWhenStopped(true);  % default = false
jObj.useWhiteDots(false);         % default = false (true is good for dark backgrounds)
javacomponent(jObj.getComponent, [850,500,200,100], hWait);
jObj.start;     
pause(1)

global friction_coeff truck_name p axle_dolly trailer_code axle_trailer S

friction_coeff=str2double(get(S.friction_edit,'String'));

load_system('LZV_custom.slx');
set_param(strcat('LZV_custom/',truck_name),'friction_coeff',num2str(friction_coeff));

for n=1:1:p-1
    if axle_dolly(n)~=0
        if axle_dolly(n)==1
            dolly='dolly_1axles';
        elseif axle_dolly(n)==2
            dolly='dolly_2axles';
        end
        dolly_name=strcat(dolly,num2str(n));
        set_param(strcat('LZV_custom/',dolly_name),'friction_coeff',num2str(friction_coeff));
    end 

    %Semi-trailer + doll
    if trailer_code(n)==2 && axle_trailer(n)==1
        trailer='semitrailer_1axles';
    elseif trailer_code(n)==2 && axle_trailer(n)==2
        trailer='semitrailer_2axles';
    elseif trailer_code(n)==2 && axle_trailer(n)==3
        trailer='semitrailer_3axles';
    elseif trailer_code(n)==2 && axle_trailer(n)==4
        trailer='semitrailer_4axles';
    elseif trailer_code(n)==21 && axle_trailer(n)==4
        trailer='semitrailer_41axles';
    elseif trailer_code(n)==22 && axle_trailer(n)==4
        trailer='semitrailer_42axles';
    elseif trailer_code(n)==2 && axle_trailer(n)==5
        trailer='semitrailer_5axles';
    elseif trailer_code(n)==21 && axle_trailer(n)==5
        trailer='semitrailer_51axles';
    elseif trailer_code(n)==22 && axle_trailer(n)==5
        trailer='semitrailer_52axles';
    %Semi-trailer + doll + kingpin
    elseif trailer_code(n)==4 && axle_trailer(n)==1
        trailer='semitrailer_1axles';
    elseif trailer_code(n)==4 && axle_trailer(n)==2
        trailer='semitrailer_2axles';
    elseif trailer_code(n)==4 && axle_trailer(n)==3
        trailer='semitrailer_3axles';
    elseif trailer_code(n)==4 && axle_trailer(n)==4
        trailer='semitrailer_4axles';
    %Semi-trailer
    elseif trailer_code(n)==1 && axle_trailer(n)==1
        trailer='semitrailer_1axles';
    elseif trailer_code(n)==1 && axle_trailer(n)==2
        trailer='semitrailer_2axles';
    elseif trailer_code(n)==1 && axle_trailer(n)==3
        trailer='semitrailer_3axles';
    elseif trailer_code(n)==1 && axle_trailer(n)==4
        trailer='semitrailer_4axles';
    elseif trailer_code(n)==11 && axle_trailer(n)==4
        trailer='semitrailer_41axles';
    elseif trailer_code(n)==12 && axle_trailer(n)==4
        trailer='semitrailer_42axles';
    elseif trailer_code(n)==1 && axle_trailer(n)==5
        trailer='semitrailer_5axles';
    elseif trailer_code(n)==11 && axle_trailer(n)==5
        trailer='semitrailer_51axles';
    elseif trailer_code(n)==12 && axle_trailer(n)==5
        trailer='semitrailer_52axles';
    %Semi-trailer + kingpin
    elseif trailer_code(n)==3 && axle_trailer(n)==1
        trailer='semitrailer_1axles';
    elseif trailer_code(n)==3 && axle_trailer(n)==2
        trailer='semitrailer_2axles';
    elseif trailer_code(n)==3 && axle_trailer(n)==3
        trailer='semitrailer_3axles';
    elseif trailer_code(n)==3 && axle_trailer(n)==4
        trailer='semitrailer_4axles';
    %Trailer
    elseif trailer_code(n)==5 && axle_trailer(n)==2
        trailer='trailer_2axles';
    elseif trailer_code(n)==5 && axle_trailer(n)==3
        trailer='trailer_3axles';
    elseif trailer_code(n)==5 && axle_trailer(n)==4
        trailer='trailer_4axles';
    %Drawbar trailer
    elseif trailer_code(n)==6 && axle_trailer(n)==1
        trailer='drawbar_trailer_1axles';
    elseif trailer_code(n)==6 && axle_trailer(n)==2
        trailer='drawbar_trailer_2axles';
    elseif trailer_code(n)==6 && axle_trailer(n)==3
        trailer='drawbar_trailer_3axles';
    elseif trailer_code(n)==6 && axle_trailer(n)==4
        trailer='drawbar_trailer_4axles';
    end
    trailer_name=strcat(trailer,num2str(n));
    set_param(strcat('LZV_custom/',trailer_name),'friction_coeff',num2str(friction_coeff));
end

save_system('LZV_custom');
close_system('LZV_custom.slx');

jObj.stop;
close(hWait)

function Truckname(source,eventdata)
global S truckname

String = get(S.Truckname_edit, 'String');
 if isempty(String)
   set(S.Truckname_edit,'String',truckname);
 end
 
function Excel(source,eventdata)
global Excelsave ExcelFileName S

Excel_status = get(S.Excel_results_toggle,'Value');
if Excel_status == 1
    set(S.Excel_results_toggle,'ForeGroundColor','g');
    set(S.Excel_results_toggle,'Value',1);
    Excelsave = 1;
    [ExcelFileName,PathName] = uigetfile('*.xlsx','Select an Excel file for appending the data');
elseif Excel_status == 0
    set(S.Excel_results_toggle,'ForeGroundColor','default');
    set(S.Excel_results_toggle,'Value',0);
    Excelsave = 0;
end

function preview_callback(source,eventdata)
global S

string2=get(S.CRG_Road,'String');
value2=get(S.CRG_Road,'Value');
roadfile2=char(string2(value2));
[~, name,ext] = fileparts(roadfile2);
% roadnumber = ext(end-1);
% roadnumber2 = ext(end);
load(['visualization_',name,'.mat']);
% if roadnumber == '0'
%     roadnumber = '10';
% end
% load(['visualization',num2str(roadnumber),num2str(roadnumber2),'.mat']);

% Determine traveled distance
vis.u = (length(vis.road(1,:))-1)*vis.resolution;

% Clean up road data structure (less points for faster visualization)
vis.p=vis.p(1:10:length(vis.p));
vis.b=vis.b(1:10:length(vis.b));
vis.s=vis.s(1:10:length(vis.s));

%% Create Rotation matrix and convert to translation data
X       = ones(1,length(vis.p));    % Empty X array
Y       = ones(1,length(vis.p));    % Empty Y array
Z       = ones(1,length(vis.p));    % Empty Z array
ZL       = ones(1,length(vis.p));    % Empty Y array
ZR       = ones(1,length(vis.p));    % Empty Z array
slope   = zeros(1,length(vis.s));   % Empty slope array
banking = zeros(1,length(vis.b));   % Empty banking array

for i = 2:length(vis.p)
    slope(i)    = atan(vis.s(i));               % Convert slope fraction to radians
    X(i)        = X(i)*cos(vis.p(i))+X(i-1);    % calculate X-coordinates
    Y(i)        = Y(i)*sin(vis.p(i))+Y(i-1);    % calculate Y-coordinates
    Z(i)        = Z(i)*atan(slope(i))+Z(i-1);   % calculate Z-coordinates
end

for i = 1:length(vis.p)
        Z(i) = Z(i) - 1;
        ZL(i) = ZL(i) - 1;
        ZR(i) = ZR(i) - 1;
        Y(i) = (Y(i) - 1)/2;
        X(i) = (X(i) - 1)/2;
end

structSize  = size(vis.road);               % Determine width road
Roadwidth   = structSize(1)*vis.resolution; % Convert roadwidth to meters
roadWidth   = floor(Roadwidth);

for k = 1:roadWidth/2
    for ii = 2:length(X)
            banking(ii) = Roadwidth*(vis.b(ii));
            ZL(k,ii) = Z(ii)-banking(ii)/k;
            ZR(k,ii) = Z(ii)+banking(ii)/k;
    end
end

for i = 0:roadWidth/2-1
    [x_inner(:,i+1), y_inner(:,i+1), x_outer(:,i+1), y_outer(:,i+1)] = parallel_curve(X,Y,roadWidth/2-1*i,0,0);
    XL(i+1,:) = x_outer(:,i+1)';
    XR(i+1,:) = x_inner(:,i+1)';
    YL(i+1,:) = y_outer(:,i+1)';
    YR(i+1,:) = y_inner(:,i+1)';
end
Z = Z./2;
ZL = ZL./2;
ZR = ZR./2;

clear x_outer x_inner y_outer y_inner i structSize

figure
plot3(X,Y,Z,'LineWidth',2, 'Color','r','LineStyle','--'); hold on; grid on

for i = 1:roadWidth/2
    plot3(XR(i,:), YR(i,:), ZR(i,:),'LineWidth',1,'Color','k')
    plot3(XL(i,:),YL(i,:),ZL(i,:),'LineWidth',1,'Color','k')
end

xlabel('X');ylabel('Y');zlabel('Z')
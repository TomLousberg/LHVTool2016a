function core_simulation_results

global S wheelbase name Excelsave results_statics
global results_CRG results_startability results_acceleration
global results_overtaking results_tracking results_directional results_ridequality
global results_sweptpath results_sweptpath360 results_frontalswing results_tailswing
global results_tyrefriction results_sidewind results_turn90r8 results_rollover results_rearward
global results_offtracking results_yawdamping results_handling results_gradeability_motion results_gradeability_speed

warning('off' ,'all');
javaaddpath(which('MatlabGarbageCollector.jar'));
org.dt.matlab.utilities.JavaMemoryCleaner.clear(1);
clc;
Excelsave = 0;

dirData1 = dir('library/road_profiles/ridequality');
dirIndex = [dirData1.isdir];
filelist_rollover2 = {dirData1(~dirIndex).name}';

% CRG popupmenu
dirData2 = dir('simresults/CRG/LZV_custom/');
filelist_CRG = {dirData2(3:end).name};
if isempty(filelist_CRG)
    filelist_CRG = 'No data';
end   
% Startability popupmenu
dirData2 = dir('simresults/C1_Startability/LZV_custom/');
filelist_startability = {dirData2(3:end).name};
if isempty(filelist_startability)
    filelist_startability = 'No data';
end    
% Gradeability popupmenu
dirData2 = dir('simresults/C2_Gradeability/Motion/LZV_custom');
motionFile = {dirData2(3:end).name};
dirData2 = dir('simresults/C2_Gradeability/Speed/LZV_custom');
speedFile = {dirData2(3:end).name};
if isempty(motionFile)
    motionFile = 'No data';
end        
if isempty(speedFile)
    speedFile = 'No data';
end      
% Acceleration popupmenu
dirData2 = dir('simresults/C3_Acceleration/LZV_custom');
filelist_acceleration = {dirData2(3:end).name};
if isempty(filelist_acceleration)
    filelist_acceleration = 'No data';
end
% Overtaking popupmenu
dirData2 = dir('simresults/C4_Overtaking/LZV_custom');
filelist_overtaking = {dirData2(3:end).name};
if isempty(filelist_overtaking)
    filelist_overtaking = 'No data';
end        
% TrackingAbility popupmenu
dirData2 = dir('simresults/C5_TrackingAbility/LZV_custom');
filelist_tracking = {dirData2(3:end).name};
if isempty(filelist_tracking)
    filelist_tracking = 'No data';
end    
% Ridequality popupmenu
dirData2 = dir('simresults/C6_RideQuality/LZV_custom');
filelist_ridequality = {dirData2(3:end).name};
if isempty(filelist_ridequality)
    filelist_ridequality = 'No data';
end        
% Swept path popupmenu
dirData2 = dir('simresults/C7_SweptPath/LZV_custom');
filelist_sweptpath = {dirData2(3:end).name};
if isempty(filelist_sweptpath)
    filelist_sweptpath = 'No data';
end    
% Frontal swing popupmenu
dirData2 = dir('simresults/C8_FrontalSwing/LZV_custom');
filelist_frontalswing = {dirData2(3:end).name};
if isempty(filelist_frontalswing)
    filelist_frontalswing = 'No data';
end      
% Tail swing popupmenu
dirData2 = dir('simresults/C9_TailSwing/LZV_custom');
filelist_tailswing = {dirData2(3:end).name};
if isempty(filelist_tailswing)
    filelist_tailswing = 'No data';
end          
% Tyre friction popupmenu
dirData2 = dir('simresults/C10_TyreFriction/LZV_custom');
filelist_tyrefriction = {dirData2(3:end).name};
if isempty(filelist_tyrefriction)
    filelist_tyrefriction = 'No data';
end              
% Rollover popupmenu
dirData2 = dir('simresults/C11_Rollover/LZV_custom');
filelist_rollover = {dirData2(3:end).name};
if isempty(filelist_rollover)
    filelist_rollover = 'No data';
end
% Rearward amplification popupmenu
dirData2 = dir('simresults/C12_RearwardAmpli/LZV_custom');
filelist_rearwardampli = {dirData2(3:end).name};
if isempty(filelist_rearwardampli)
    filelist_rearwardampli = 'No data';
end      
% Offtracking popupmenu
    dirData2 = dir('simresults/C13_Offtracking/LZV_custom');
filelist_offtracking = {dirData2(3:end).name};
if isempty(filelist_offtracking)
    filelist_offtracking = 'No data';
end     
% Yaw damping popupmenu
dirData2 = dir('simresults/C14_YawDamping/LZV_custom');
filelist_yawdamping = {dirData2(3:end).name};
if isempty(filelist_yawdamping)
    filelist_yawdamping = 'No data';
end    
% Handling quality popupmenu
    dirData2 = dir('simresults/C15_HandlingQuality/LZV_custom');
filelist_handling = {dirData2(3:end).name};
if isempty(filelist_handling)
    filelist_handling = 'No data';
end    
% Directional stability popupmenu
    dirData2 = dir('simresults/C16_DirectionalStability/LZV_custom');
filelist_directional = {dirData2(3:end).name};
if isempty(filelist_directional)
    filelist_directional = 'No data';
end       
% Sidewind popupmenu
    dirData2 = dir('simresults/Sidewind/LZV_custom');
filelist_sidewind = {dirData2(3:end).name};
if isempty(filelist_sidewind)
    filelist_sidewind = 'No data';
end         
% Statics popupmenu
    dirData2 = dir('simresults/Statics/LZV_custom');
filelist_statics = {dirData2(3:end).name};
if isempty(filelist_statics)
    filelist_statics = 'No data';
end         
% Sweptpath 360 popupmenu
    dirData2 = dir('simresults/SweptPath360/LZV_custom');
filelist_sweptpath360 = {dirData2(3:end).name};
if isempty(filelist_sweptpath360)
    filelist_sweptpath360 = 'No data';
end    

% Turn 90R8 popupmenu
    dirData2 = dir('simresults/Turn90R8/LZV_custom');
filelist_turn90r8 = {dirData2(3:end).name};
if isempty(filelist_turn90r8)
    filelist_turn90r8 = 'No data';
end    

% Statics popupmenu
dirData2 = dir('simresults/Statics/LZV_custom');
filelist_statics = {dirData2(3:end).name};
if isempty(filelist_statics)
    filelist_statics = 'No data';
end   

S.f = figure('NumberTitle','off','Name','LHV Tool - Core simulation',...
             'color','w','toolbar','none','menubar','none','Units','Normalized',...
             'Position',[0.2 0.15 0.8 0.75],'visible','off'); 
                   
S.back_button = uicontrol('style','pushbutton',...
                          'BackgroundColor','w',...
                          'String','Back',...
                          'FontSize',10,...
                          'FontUnits','Normalized',...
                          'FontWeight','bold',...
                          'ForeGroundColor','r',...
                          'units','normalized',...
                          'position',[0.005 0.94 0.1 0.05],...
                          'Callback',@Back_callback);
                      
S.Excel_results_toggle = uicontrol('Style','toggle',...
                                    'Units','Normalized',...
                                    'Position',[0.525 0.94 0.1 0.05],...
                                    'backgroundcolor','w',...
                                    'String','Export to Excel',...
                                    'FontSize', 10,...
                                    'FontWeight','bold',...
                                    'FontUnits','Normalized',...
                                    'Callback',@Excel);

S.Truckname_edit = uicontrol('Style','edit',...
                             'Units','Normalized',...
                             'Position',[0.375 0.94 0.1 0.05],...
                             'backgroundcolor','w',...
                             'String',name,...
                             'FontSize', 10,...
                             'FontWeight','bold',...
                             'FontUnits','Normalized',...
                             'Callback',@Truckname);                                

if isempty(name)
    [MonthNum, MonthString] = month(date);
    Second = second(datetime);
    x = sprintf('%0.0f\n', Second);
    secs = str2num(x);
    Minute = minute(datetime);
    Hour = hour(datetime);
    Day = day(date);
    Month = MonthString;
    Year = year(date);
    set(S.Truckname_edit,'String',[Month '_' num2str(Day) '_' num2str(Year) '_' num2str(Hour) '_' num2str(Minute) '_' num2str(secs)]);
end
                         
S.simulate_button = uicontrol('style','pushbutton',...
                    'BackgroundColor','w',...
                    'String','Next',...
                    'FontSize',10,...
                    'FontWeight','bold',...
                    'FontUnits','Normalized',...
                    'ForeGroundColor','b',...
                    'units','normalized',...
                    'position',[0.895 0.94 0.1 0.05],...
                    'Callback',@simulate_callback);      
                     
S.select_all_toggle = uicontrol('style','toggle',...
                         'BackgroundColor','w',...
                         'String','Select all',...
                         'FontSize',12,...
                         'FontUnits','Normalized',...
                         'FontWeight','bold',...
                         'units','normalized',...
                         'position',[0.69 0.04 0.1 0.03],...
                         'Callback',@select_all_callback);
                     
%% CRG panel
S.CRG_panel = uipanel('Units','Centimeters',...
                      'Position',[0.1 13.5 9 2],...
                      'backgroundcolor','w',...
                      'Units','Normalized',...
                      'BorderWidth',2,...
                      'BorderType','Line',...
                      'FontSize',12,...
                      'FontUnits','Normalized',...
                      'FontWeight','bold',...
                      'Title','CRG',...
                      'highlightcolor','k'); 

S.enable_CRG_toggle = uicontrol(S.CRG_panel,...
                                'Style','toggle',...
                                'Units','Normalized',...
                                'Position',[0.01 0.12 0.15 0.99],...
                                'String','Deselected',...
                                'Fontweight','bold',...
                                'FontSize',7,...
                                'FontUnits','Normalized',...
                                'Callback',@enable_CRG_callback);

S.CRG_results_popupmenu = uicontrol(S.CRG_panel,...
                                             'style','popup',...
                                             'BackgroundColor','w',...
                                             'String',filelist_CRG,...
                                             'FontSize',8,...
                                             'units','normalized',...
                                             'Enable','Off',...
                                             'position',[0.4 0.3 0.25 0.2],...
                                             'FontUnits','Normalized');        
                
S.CRG_results_text = uicontrol(S.CRG_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                      
                                                
%% Start ability panel               
S.Startability_panel = uipanel('Units','Centimeters',...
                               'Position',[0.1 11.5 9 2],...
                               'backgroundcolor','w',...
                               'Units','Normalized',...
                               'BorderWidth',2,...
                               'BorderType','Line',...
                               'FontSize',11,...
                               'FontUnits','Normalized',...
                               'FontWeight','bold',...
                               'Title','Start ability',...
                               'highlightcolor','k');

S.enable_startability_toggle = uicontrol(S.Startability_panel,...
                                        'Style','toggle',...
                                        'Units','Normalized',...
                                        'Position',[0.01 0.12 0.15 0.99],...
                                        'String','Deselected',...
                                        'Fontweight','bold',...
                                        'FontSize',7,...
                                        'FontUnits','Normalized',...
                                        'Callback',@enable_startability_callback);      
                                    
S.startability_results_popupmenu = uicontrol(S.Startability_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_startability,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.startability_results_text = uicontrol(S.Startability_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                                     

axes('Parent', S.Startability_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('startability.bmp') 
%% grade ability panel

S.Gradeability_panel = uipanel('Units','Centimeters',...
                               'Position',[0.1 9.5 9 2],...
                               'backgroundcolor','w',...
                               'Units','Normalized',...
                               'BorderWidth',2,...
                               'BorderType','Line',...
                               'FontSize',11,...
                               'FontUnits','Normalized',...
                               'FontWeight','bold',...
                               'Title','Grade ability',...
                               'highlightcolor','k');
                      
S.enable_gradeability_toggle = uicontrol(S.Gradeability_panel,...
                                        'Style','toggle',...
                                        'Units','Normalized',...
                                        'Position',[0.01 0.12 0.15 0.99],...
                                        'String','Deselected',...
                                        'Fontweight','bold',...
                                        'FontSize',7,...
                                        'FontUnits','Normalized',...
                                        'Callback',@enable_gradeability_callback);  
                                    
S.gradeability_speed_results_popupmenu = uicontrol(S.Gradeability_panel,...
                                                  'Style','popup',...
                                                  'Units','Normalized',...
                                                  'Position',[0.4 0.3 0.25 0.2],...
                                                  'backgroundcolor','w',...
                                                  'Enable','off',...
                                                  'String',speedFile,...
                                                  'FontSize', 7,...
                                                  'FontUnits','Normalized');                                                                     
                         
S.gradeability_speed_results_text = uicontrol(S.Gradeability_panel,...
                                               'Style','text',...
                                               'Units','Normalized',...
                                               'Position',[0.425 0.6 0.2 0.2],...
                                               'backgroundcolor','w',...
                                               'String','Data file (speed)',...
                                               'FontSize', 8,...
                                               'FontUnits','Normalized');                                     

S.gradeability_motion_results_popupmenu = uicontrol(S.Gradeability_panel,...
                                                    'Style','popup',...
                                                    'Units','Normalized',...
                                                    'Position',[0.7 0.3 0.25 0.2],...
                                                    'backgroundcolor','w',...
                                                    'Enable','off',...
                                                    'String',motionFile,...
                                                    'FontSize', 7,...
                                                    'FontUnits','Normalized');                                                                     
                         
S.gradeability_motion_results_text = uicontrol(S.Gradeability_panel,...
                                               'Style','text',...
                                               'Units','Normalized',...
                                               'Position',[0.725 0.6 0.2 0.2],...
                                               'backgroundcolor','w',...
                                               'String','Data file (motion)',...
                                               'FontSize', 8,...
                                               'FontUnits','Normalized');  
                           
axes('Parent', S.Gradeability_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('pente.bmp') 

%% Acceleration panel

S.Acceleration_panel = uipanel('Units','Centimeters',...
                               'Position',[0.1 7.5 9 2],...
                               'backgroundcolor','w',...
                               'Units','Normalized',...
                               'BorderWidth',2,...
                               'BorderType','Line',...
                               'FontSize',11,...
                               'FontUnits','Normalized',...
                               'FontWeight','bold',...
                               'Title','Acceleration capability',...
                               'highlightcolor','k');

S.enable_acceleration_toggle = uicontrol(S.Acceleration_panel,...
                                        'Style','toggle',...
                                        'Units','Normalized',...
                                        'Position',[0.01 0.12 0.15 0.99],...
                                        'String','Deselected',...
                                        'Fontweight','bold',...
                                        'FontSize',7,...
                                        'FontUnits','Normalized',...
                                        'Callback',@enable_acceleration_callback);  
                                    
S.acceleration_results_popupmenu = uicontrol(S.Acceleration_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_acceleration,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.acceleration_results_text = uicontrol(S.Acceleration_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                                     
                      
axes('Parent', S.Acceleration_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('acceleration.bmp') 

%% Overtaking panel

S.Overtaking_panel = uipanel('Units','Centimeters',...
                               'Position',[0.1 5.5 9 2],...
                            'backgroundcolor','w',...
                            'Units','Normalized',...
                            'BorderWidth',2,...
                            'BorderType','Line',...
                            'FontSize',11,...
                            'FontUnits','Normalized',...
                            'FontWeight','bold',...
                            'Title','Overtaking position',...
                            'highlightcolor','k');
                      
S.enable_overtaking_toggle = uicontrol(S.Overtaking_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_overtaking_callback);
                                   
S.overtaking_results_popupmenu = uicontrol(S.Overtaking_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_overtaking,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.overtaking_results_text = uicontrol(S.Overtaking_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                                    

axes('parent',S.Overtaking_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('overtaking.bmp') 

%% Tracking ability panel 

S.Tracking_panel = uipanel('Units','Centimeters',...
                           'Position',[0.1 3.5 9 2],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'FontSize',11,...
                           'FontUnits','Normalized',...
                           'FontWeight','bold',...
                           'Title','Tracking Ability on a Straight Path',...
                           'highlightcolor','k');

S.enable_tracking_toggle = uicontrol(S.Tracking_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_tracking_callback);

S.tracking_results_popupmenu = uicontrol(S.Tracking_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_tracking,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.tracking_results_text = uicontrol(S.Tracking_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');
                           
axes('Parent',S.Tracking_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('straight.bmp') 

%% Directional Stability panel

S.Directional_panel = uipanel('Units','Centimeters',...
                              'Position',[0.1 1.5 9 2],...
                              'backgroundcolor','w',...
                              'Units','Normalized',...
                              'BorderWidth',2,...
                              'BorderType','Line',...
                              'FontSize',11,...
                              'FontUnits','Normalized',...
                              'FontWeight','bold',...
                              'Title','Directional Stability Under Braking',...
                              'highlightcolor','k');


S.enable_directional_toggle = uicontrol(S.Directional_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_directional_callback);
                                   
S.directional_results_popupmenu = uicontrol(S.Directional_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_directional,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.direcitonal_results_text = uicontrol(S.Directional_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                                   
                      
axes('Parent',S.Directional_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('stop.bmp') 
%% Ride quality panel

S.Ridequality_panel = uipanel('Units','Centimeters',...
                              'Position',[12 13.5 9 2],...
                              'backgroundcolor','w',...
                              'Units','Normalized',...
                              'BorderWidth',2,...
                              'BorderType','Line',...
                              'FontSize',11,...
                              'FontUnits','Normalized',...
                              'FontWeight','bold',...
                              'Title','Ride quality',...
                              'highlightcolor','k');

S.ridequality_results_popupmenu = uicontrol(S.Ridequality_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_ridequality,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.ridequality_results_text = uicontrol(S.Ridequality_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized'); 
                        
S.enable_ridequality_toggle = uicontrol(S.Ridequality_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_ridequality_callback);
                                   
axes('Parent',S.Ridequality_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('ridequality.bmp') 

%% Sweptpath panel

S.Sweptpath_panel = uipanel('Units','Centimeters',...
                            'Position',[12 11.5 9 2],...
                            'backgroundcolor','w',...
                            'Units','Normalized',...
                            'BorderWidth',2,...
                            'BorderType','Line',...
                            'FontSize',11,...
                            'FontUnits','Normalized',...
                            'FontWeight','bold',...
                            'Title','Low-Speed Swept Path',...
                            'highlightcolor','k');
                      
S.enable_sweptpath_toggle = uicontrol(S.Sweptpath_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_sweptpath_callback);
                                   
S.sweptpath_results_popupmenu = uicontrol(S.Sweptpath_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_sweptpath,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.sweptpath_results_text = uicontrol(S.Sweptpath_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                                   

axes('Parent',S.Sweptpath_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('virage.bmp') 

%% Sweptpath 360 panel

S.Sweptpath360_panel = uipanel('Units','Centimeters',...
                               'Position',[12 9.5 9 2],...
                               'backgroundcolor','w',...
                               'Units','Normalized',...
                               'BorderWidth',2,...
                               'BorderType','Line',...
                               'FontSize',11,...
                               'FontUnits','Normalized',...
                               'FontWeight','bold',...
                               'Title','Low-Speed Swept Path 360',...
                                'highlightcolor','k');
                      
S.enable_sweptpath360_toggle = uicontrol(S.Sweptpath360_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_sweptpath360_callback);
                                   
S.sweptpath360_results_popupmenu = uicontrol(S.Sweptpath360_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_sweptpath360,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.sweptpath360_results_text = uicontrol(S.Sweptpath360_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                                   
                                          
axes('Parent',S.Sweptpath360_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('virage.bmp') 

%% Frontal swing panel

S.Frontalswing_panel = uipanel('Units','Centimeters',...
                               'Position',[12 7.5 9 2],...
                               'backgroundcolor','w',...
                               'Units','Normalized',...
                               'BorderWidth',2,...
                               'BorderType','Line',...
                               'FontSize',11,...
                               'FontUnits','Normalized',...
                               'FontWeight','bold',...
                               'Title','Frontal swing',...
                               'highlightcolor','k');
                      
S.enable_Frontalswing_toggle = uicontrol(S.Frontalswing_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_frontalswing_callback);
                                   
S.frontalswing_results_popupmenu = uicontrol(S.Frontalswing_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_frontalswing,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.frontalswing_results_text = uicontrol(S.Frontalswing_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                                   
                     
axes('Parent',S.Frontalswing_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('virage.bmp') 

%% Tail swing panel

S.Tailswing_panel = uipanel('Units','Centimeters',...
                            'Position',[12 5.5 9 2],...
                            'backgroundcolor','w',...
                            'Units','Normalized',...
                            'BorderWidth',2,...
                            'BorderType','Line',...
                            'FontSize',11,...
                            'FontUnits','Normalized',...
                            'FontWeight','bold',...
                            'Title','Tail swing',...
                            'highlightcolor','k');
                      
S.enable_Tailswing_toggle = uicontrol(S.Tailswing_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_tailswing_callback);
                                   
S.tailswing_results_popupmenu = uicontrol(S.Tailswing_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_tailswing,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.tailswing_results_text = uicontrol(S.Tailswing_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                                   

axes('Parent',S.Tailswing_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('virage.bmp') 

%% Tyre friction panel

S.Tyrefriction_panel = uipanel('Units','Centimeters',...
                              'Position',[12 3.5 9 2],...
                              'backgroundcolor','w',...
                              'Units','Normalized',...
                              'BorderWidth',2,...
                              'BorderType','Line',...
                              'FontSize',11,...
                              'FontUnits','Normalized',...
                              'FontWeight','bold',...
                              'Title','Steer-Tyre Friction Demand',...
                              'highlightcolor','k');
                      
S.enable_Tyrefriction_toggle = uicontrol(S.Tyrefriction_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_tyrefriction_callback);
                                   
S.tyrefriction_results_popupmenu = uicontrol(S.Tyrefriction_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_tyrefriction,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.tyrefriction_results_text = uicontrol(S.Tyrefriction_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                                   

axes('Parent',S.Tyrefriction_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('tyrefriction.bmp') 

%% Side wind panel

S.Sidewind_panel = uipanel('Units','Centimeters',...
                           'Position',[12 1.5 9 2],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'FontSize',11,...
                           'FontUnits','Normalized',...
                           'FontWeight','bold',...
                           'Title','Sidewind',...
                           'highlightcolor','k');

S.sidewind_results_popupmenu = uicontrol(S.Sidewind_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_sidewind,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.sidewind_results_text = uicontrol(S.Sidewind_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                       
                         
S.enable_Sidewind_toggle = uicontrol(S.Sidewind_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_sidewind_callback);

%% Turn 90R8 panel

S.Turn90R8_panel = uipanel('Units','Centimeters',...
                           'Position',[22.9 13.5 9 2],...
                          'backgroundcolor','w',...
                          'Units','Normalized',...
                          'BorderWidth',2,...
                          'BorderType','Line',...
                          'FontSize',11,...
                          'FontUnits','Normalized',...
                          'FontWeight','bold',...
                          'Title','90 deg Turn R8',...
                          'highlightcolor','k');
                      
S.enable_Turn90R8_toggle = uicontrol(S.Turn90R8_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_turn90R8_callback);
                                   
S.turn90r8_results_popupmenu = uicontrol(S.Turn90R8_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_turn90r8,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.turn90r8_results_text = uicontrol(S.Turn90R8_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                                   

axes('Parent',S.Turn90R8_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('tyrefriction.bmp') 

%% Rollover panel

S.Rollover_panel = uipanel('Units','Centimeters',...
                           'Position',[22.9 11.5 9 2],...
                          'backgroundcolor','w',...
                          'Units','Normalized',...
                          'BorderWidth',2,...
                          'BorderType','Line',...
                          'FontSize',11,...
                          'FontUnits','Normalized',...
                          'FontWeight','bold',...
                          'Title','Static Rollover Threshold',...
                          'highlightcolor','k');
                      
S.rollover_results_popupmenu = uicontrol(S.Rollover_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_rollover,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.rollover_results_text = uicontrol(S.Rollover_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                      
                         
S.enable_Rollover_toggle = uicontrol(S.Rollover_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_rollover_callback);
                                                                    
axes('Parent',S.Rollover_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('rollover.bmp') 

%% Rearward amplification panel

S.Rearward_panel = uipanel('Units','Centimeters',...
                           'Position',[22.9 9.5 9 2],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'FontSize',11,...
                           'FontUnits','Normalized',...
                           'FontWeight','bold',...
                           'Title','Rearward amplification',...
                           'highlightcolor','k');
                      
S.enable_Rearward_toggle = uicontrol(S.Rearward_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_rearward_callback);

S.rearward_results_popupmenu = uicontrol(S.Rearward_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.35 0.3 0.15 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_rearwardampli,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.rearward_results_text = uicontrol(S.Rearward_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.325 0.6 0.15 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                                   

S.rollover_results_panel = uipanel('parent',S.Rearward_panel,...
                           'Position',[0.525 0.1 0.45 0.9],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'FontSize',8,...
                           'FontUnits','Normalized',...
                           'FontWeight','bold',...
                           'Title','Rollover Results',...
                           'highlightcolor','k');
                       
S.results_text = uicontrol(S.rollover_results_panel,...
                           'Style','text',...
                           'Units','Normalized',...
                           'Position',[0.1 0.7 0.3 0.2],...
                           'backgroundcolor','w',...
                           'String','Data file (rollover)',...
                           'FontSize', 8,...
                           'FontUnits','Normalized'); 
                         
S.rollover_popupmenu = uicontrol(S.rollover_results_panel,...
                                 'Style','popup',...
                                 'Units','Normalized',...
                                 'Position',[0.1 0.3 0.3 0.2],...
                                 'backgroundcolor','w',...
                                 'Enable','off',...
                                 'FontSize', 7,...
                                 'FontUnits','Normalized',...
                                 'String', filelist_rollover);

S.rolloverresults_checkbox = uicontrol(S.rollover_results_panel,...
                                       'Style','checkbox',...
                                       'Units','Normalized',...
                                       'Position',[0.05 0.6 0.1 0.3],...
                                       'backgroundcolor','w',...
                                       'Enable','off',...
                                       'Value',1,...
                                       'Callback',@rollover_results_check);  

S.rollover_text = uicontrol(S.rollover_results_panel,...
                                       'Style','text',...
                                       'Units','Normalized',...
                                       'Position',[0.5 0.5 0.5 0.5],...
                                       'FontSize', 7,...
                                       'FontUnits','Normalized',...
                                       'String','Velocity (km/h)',...
                                       'backgroundcolor','w'); 
                                   
S.rollover_edit = uicontrol(S.rollover_results_panel,...
                                       'Style','edit',...
                                       'Units','Normalized',...
                                       'Position',[0.6 0.1 0.3 0.4],...
                                       'backgroundcolor','w',...
                                       'String','40',...
                                       'FontSize', 7,...
                                       'FontUnits','Normalized',...
                                       'Enable','off'); 
                                   
axes('Parent',S.Rearward_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('singlesine.bmp') 

%% Offtracking panel

S.Offtracking_panel = uipanel('Units','Centimeters',...
                              'Position',[22.9 7.5 9 2],...
                              'backgroundcolor','w',...
                              'Units','Normalized',...
                              'BorderWidth',2,...
                              'BorderType','Line',...
                              'FontSize',11,...
                              'FontUnits','Normalized',...
                              'FontWeight','bold',...
                              'Title','High-Speed Transient Offtracking',...
                              'highlightcolor','k');                      

S.offtracking_results_popupmenu = uicontrol(S.Offtracking_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_offtracking,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.offtracking_results_text = uicontrol(S.Offtracking_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                          
                         
S.enable_Offtracking_toggle = uicontrol(S.Offtracking_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_offtracking_callback);

axes('Parent',S.Offtracking_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('singlesine.bmp') 

%% Yawdamping panel

S.Yawdamping_panel = uipanel('Units','Centimeters',...
                             'Position',[22.9 5.5 9 2],...
                             'backgroundcolor','w',...
                             'Units','Normalized',...
                             'BorderWidth',2,...
                             'BorderType','Line',...
                             'FontSize',11,...
                             'FontUnits','Normalized',...
                             'FontWeight','bold',...
                             'Title','Yaw Damping Coefficient',...
                             'highlightcolor','k'); 

S.yawdamping_results_popupmenu = uicontrol(S.Yawdamping_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_yawdamping,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.yawdamping_results_text = uicontrol(S.Yawdamping_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                         
                         
S.enable_Yawdamping_toggle = uicontrol(S.Yawdamping_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_yawdamping_callback);

axes('Parent',S.Yawdamping_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
     'xtick',[],'ytick',[]);
imshow('yawdamping.bmp') 

%% Handling quality panel

S.handling_panel = uipanel('Units','Centimeters',...
                           'Position',[22.9 3.5 9 2],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'FontSize',11,...
                           'FontUnits','Normalized',...
                           'FontWeight','bold',...
                           'Title','Handling Quality',...
                           'highlightcolor','k'); 
                       
S.handling_results_popupmenu = uicontrol(S.handling_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_handling,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.handling_results_text = uicontrol(S.handling_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                       

S.enable_Handling_toggle = uicontrol(S.handling_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_handling_callback);
                      
axes('Parent',S.handling_panel,...
     'units','normalized',...
     'position',[-0.1 0.25 .7 .7],...
      'xtick',[],'ytick',[]);
imshow('volant.bmp') 
 
%% Statics
%% Handling quality panel

S.statics_panel = uipanel('Units','Centimeters',...
                           'Position',[22.9 1.5 9 2],...
                           'backgroundcolor','w',...
                           'Units','Normalized',...
                           'BorderWidth',2,...
                           'BorderType','Line',...
                           'FontSize',11,...
                           'FontUnits','Normalized',...
                           'FontWeight','bold',...
                           'Title','Statics',...
                           'highlightcolor','k'); 
                       
S.statics_results_popupmenu = uicontrol(S.statics_panel,...
                                    'Style','popup',...
                                    'Units','Normalized',...
                                    'Position',[0.4 0.3 0.25 0.2],...
                                    'backgroundcolor','w',...
                                    'Enable','off',...
                                    'String',filelist_statics,...
                                    'FontSize', 7,...
                                    'FontUnits','Normalized');                                                                     
                         
S.statics_results_text = uicontrol(S.statics_panel,...
                               'Style','text',...
                               'Units','Normalized',...
                               'Position',[0.425 0.6 0.2 0.2],...
                               'backgroundcolor','w',...
                               'String','Data file',...
                               'FontSize', 8,...
                               'FontUnits','Normalized');                       

S.enable_statics_toggle = uicontrol(S.statics_panel,...
                                       'Style','toggle',...
                                       'Units','Normalized',...
                                       'Position',[0.01 0.12 0.15 0.99],...
                                       'String','Deselected',...
                                       'Fontweight','bold',...
                                       'FontSize',7,...
                                       'FontUnits','Normalized',...
                                       'Callback',@enable_statics_callback);

%%
results_statics = get(S.statics_results_popupmenu,'String'); 
results_CRG = get(S.CRG_results_popupmenu,'String'); 
results_startability = get(S.startability_results_popupmenu,'String'); 
results_gradeability_motion = get(S.gradeability_motion_results_popupmenu,'String'); 
results_gradeability_speed = get(S.gradeability_speed_results_popupmenu,'String'); 
results_acceleration = get(S.acceleration_results_popupmenu,'String'); 
results_overtaking = get(S.overtaking_results_popupmenu,'String'); 
results_tracking = get(S.tracking_results_popupmenu,'String'); 
results_directional = get(S.directional_results_popupmenu,'String'); 
results_ridequality = get(S.ridequality_results_popupmenu,'String'); 
results_sweptpath = get(S.sweptpath_results_popupmenu,'String'); 
results_sweptpath360 = get(S.sweptpath360_results_popupmenu,'String'); 
results_frontalswing = get(S.frontalswing_results_popupmenu,'String'); 
results_tailswing = get(S.tailswing_results_popupmenu,'String'); 
results_tyrefriction = get(S.tyrefriction_results_popupmenu,'String'); 
results_sidewind = get(S.sidewind_results_popupmenu,'String'); 
results_turn90r8 = get(S.turn90r8_results_popupmenu,'String'); 
results_rollover = get(S.rollover_results_popupmenu,'String'); 
results_rearward = get(S.rearward_results_popupmenu,'String'); 
results_offtracking = get(S.offtracking_results_popupmenu,'String'); 
results_yawdamping = get(S.yawdamping_results_popupmenu,'String'); 
results_handling = get(S.handling_results_popupmenu,'String'); 

set(S.f,'visible','on');                
pause(1)
figure(S.f)
robot = java.awt.Robot; 
robot.keyPress(java.awt.event.KeyEvent.VK_ALT);      %// send ALT
robot.keyPress(java.awt.event.KeyEvent.VK_SPACE);    %// send SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_SPACE);  %// release SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);    %// release ALT
robot.keyPress(java.awt.event.KeyEvent.VK_X);        %// send X
robot.keyRelease(java.awt.event.KeyEvent.VK_X);      %// release X

function select_all_callback(source,eventdata)
global S
global results_startability results_acceleration results_statics
global results_overtaking results_tracking results_directional results_ridequality
global results_sweptpath results_sweptpath360 results_frontalswing results_tailswing
global results_tyrefriction results_sidewind results_turn90r8 results_rollover results_rearward
global results_CRG results_offtracking results_yawdamping results_handling results_gradeability_motion results_gradeability_speed

selected = get(S.select_all_toggle, 'value');

if selected
    set(S.select_all_toggle,'String','Deselect all');
    set(S.select_all_toggle,'BackgroundColor','g');

    if iscell(results_CRG) == 1 
        set(S.enable_statics_toggle,'String','Selected');
        set(S.enable_statics_toggle,'BackgroundColor','g');
        set(S.enable_statics_toggle,'Value',1);
        set(S.statics_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_CRG) == 1 
        set(S.enable_CRG_toggle,'String','Selected');
        set(S.enable_CRG_toggle,'BackgroundColor','g');
        set(S.enable_CRG_toggle,'Value',1);
        set(S.CRG_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_startability) == 1 
    set(S.enable_startability_toggle,'String','Selected');
    set(S.enable_startability_toggle,'BackgroundColor','g');
    set(S.enable_startability_toggle,'value',1);
    set(S.startability_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_gradeability_motion) == 1 && iscell(results_gradeability_speed) == 1     
    set(S.enable_gradeability_toggle,'String','Selected');
    set(S.enable_gradeability_toggle,'BackgroundColor','g');
    set(S.enable_gradeability_toggle,'value',1);
    set(S.gradeability_speed_results_popupmenu,'Enable','on');
    set(S.gradeability_motion_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_acceleration) == 1     
    set(S.enable_acceleration_toggle,'String','Selected');
    set(S.enable_acceleration_toggle,'BackgroundColor','g');
    set(S.enable_acceleration_toggle,'value',1);
    set(S.acceleration_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_overtaking) == 1     
    set(S.enable_overtaking_toggle,'String','Selected');
    set(S.enable_overtaking_toggle,'BackgroundColor','g');
    set(S.enable_overtaking_toggle,'value',1);
    set(S.overtaking_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_tracking) == 1     
    set(S.enable_tracking_toggle,'String','Selected');
    set(S.enable_tracking_toggle,'BackgroundColor','g');
    set(S.enable_tracking_toggle,'value',1);
    set(S.tracking_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_directional) == 1     
    set(S.enable_directional_toggle,'String','Selected');
    set(S.enable_directional_toggle,'BackgroundColor','g');
    set(S.enable_directional_toggle,'value',1);
    set(S.directional_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_ridequality) == 1 
    set(S.enable_ridequality_toggle,'String','Selected');
    set(S.enable_ridequality_toggle,'BackgroundColor','g');
    set(S.enable_ridequality_toggle,'value',1);
    set(S.ridequality_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_sweptpath) == 1     
    set(S.enable_sweptpath_toggle,'String','Selected');
    set(S.enable_sweptpath_toggle,'BackgroundColor','g');
    set(S.enable_sweptpath_toggle,'value',1);
    set(S.sweptpath_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_sweptpath360) == 1     
    set(S.enable_sweptpath360_toggle,'String','Selected');
    set(S.enable_sweptpath360_toggle,'BackgroundColor','g');
    set(S.enable_sweptpath360_toggle,'value',1);
    set(S.sweptpath360_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_frontalswing) == 1     
    set(S.enable_Frontalswing_toggle,'String','Selected');
    set(S.enable_Frontalswing_toggle,'BackgroundColor','g');
    set(S.enable_Frontalswing_toggle,'value',1);
    set(S.frontalswing_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_tailswing) == 1     
    set(S.enable_Tailswing_toggle,'String','Selected');
    set(S.enable_Tailswing_toggle,'BackgroundColor','g');
    set(S.enable_Tailswing_toggle,'value',1);
    set(S.tailswing_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_tyrefriction) == 1     
    set(S.enable_Tyrefriction_toggle,'String','Selected');
    set(S.enable_Tyrefriction_toggle,'BackgroundColor','g');
    set(S.enable_Tyrefriction_toggle,'value',1);
    set(S.tyrefriction_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_sidewind) == 1     
    set(S.enable_Sidewind_toggle,'String','Selected');
    set(S.enable_Sidewind_toggle,'BackgroundColor','g');
    set(S.enable_Sidewind_toggle,'value',1);
    set(S.sidewind_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_turn90r8) == 1     
    set(S.enable_Turn90R8_toggle,'String','Selected');
    set(S.enable_Turn90R8_toggle,'BackgroundColor','g');
    set(S.enable_Turn90R8_toggle,'value',1);
    set(S.turn90r8_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_rollover) == 1     
    set(S.enable_Rollover_toggle,'String','Selected');
    set(S.enable_Rollover_toggle,'BackgroundColor','g');
    set(S.enable_Rollover_toggle,'value',1);
    set(S.rollover_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_rearward) == 1     
    set(S.enable_Rearward_toggle,'String','Selected');
    set(S.enable_Rearward_toggle,'BackgroundColor','g');
    set(S.enable_Rearward_toggle,'value',1);
    set(S.rearward_results_popupmenu,'Enable','on');
    set(S.rollover_popupmenu,'Enable','on');
    set(S.rolloverresults_checkbox,'Enable','on');
    set(S.rolloverresults_checkbox,'Value',1);
    set(S.rollover_edit,'Enable','off');
    end
    
    if iscell(results_offtracking) == 1     
    set(S.enable_Offtracking_toggle,'String','Selected');
    set(S.enable_Offtracking_toggle,'BackgroundColor','g');
    set(S.enable_Offtracking_toggle,'value',1);
    set(S.offtracking_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_yawdamping) == 1     
    set(S.enable_Yawdamping_toggle,'String','Selected');
    set(S.enable_Yawdamping_toggle,'BackgroundColor','g');
    set(S.enable_Yawdamping_toggle,'value',1);
    set(S.yawdamping_results_popupmenu,'Enable','on');
    end
    
    if iscell(results_handling) == 1     
    set(S.enable_Handling_toggle,'String','Selected');
    set(S.enable_Handling_toggle,'BackgroundColor','g');
    set(S.enable_Handling_toggle,'value',1);
    set(S.handling_results_popupmenu,'Enable','on');
    end
    
else
    set(S.select_all_toggle,'String','Select all');
    set(S.select_all_toggle,'BackgroundColor','default');

    set(S.enable_statics_toggle,'String','Deselected');
    set(S.enable_statics_toggle,'BackgroundColor','default');
    set(S.enable_statics_toggle,'value',0);
    set(S.statics_results_popupmenu,'Enable','off'); 
    
    set(S.enable_CRG_toggle,'String','Deselected');
    set(S.enable_CRG_toggle,'BackgroundColor','default');
    set(S.enable_CRG_toggle,'value',0);
    set(S.CRG_results_popupmenu,'Enable','off'); 
    
    set(S.enable_startability_toggle,'String','Deselected');
    set(S.enable_startability_toggle,'BackgroundColor','default');
    set(S.enable_startability_toggle,'value',0);
    set(S.startability_results_popupmenu,'Enable','off');
    
    set(S.enable_gradeability_toggle,'String','Deselected');
    set(S.enable_gradeability_toggle,'BackgroundColor','default');  
    set(S.enable_gradeability_toggle,'value',0);
    set(S.gradeability_speed_results_popupmenu,'Enable','off');
    set(S.gradeability_motion_results_popupmenu,'Enable','off');
    
    set(S.enable_acceleration_toggle,'String','Deselected');
    set(S.enable_acceleration_toggle,'BackgroundColor','default');
    set(S.enable_acceleration_toggle,'value',0);
    set(S.acceleration_results_popupmenu,'Enable','off');
    
    set(S.enable_overtaking_toggle,'String','Deselected');
    set(S.enable_overtaking_toggle,'BackgroundColor','default');
    set(S.enable_overtaking_toggle,'value',0);
    set(S.overtaking_results_popupmenu,'Enable','off');
    
    set(S.enable_tracking_toggle,'String','Deselected');
    set(S.enable_tracking_toggle,'BackgroundColor','default');   
    set(S.enable_tracking_toggle,'value',0);
    set(S.tracking_results_popupmenu,'Enable','off');
    
    set(S.enable_directional_toggle,'String','Deselected');
    set(S.enable_directional_toggle,'BackgroundColor','default');
    set(S.enable_directional_toggle,'value',0);
    set(S.directional_results_popupmenu,'Enable','off');
    
    set(S.enable_ridequality_toggle,'String','Deselected');
    set(S.enable_ridequality_toggle,'BackgroundColor','default');
    set(S.enable_ridequality_toggle,'value',0);
    set(S.ridequality_results_popupmenu,'Enable','off');
    
    set(S.enable_sweptpath_toggle,'String','Deselected');
    set(S.enable_sweptpath_toggle,'BackgroundColor','default');
    set(S.enable_sweptpath_toggle,'value',0);
    set(S.sweptpath_results_popupmenu,'Enable','off');
    
    set(S.enable_sweptpath360_toggle,'String','Deselected');
    set(S.enable_sweptpath360_toggle,'BackgroundColor','default');
    set(S.enable_sweptpath360_toggle,'value',0);
    set(S.sweptpath360_results_popupmenu,'Enable','off');
    
    set(S.enable_Frontalswing_toggle,'String','Deselected');
    set(S.enable_Frontalswing_toggle,'BackgroundColor','default');
    set(S.enable_Frontalswing_toggle,'value',0);
    set(S.frontalswing_results_popupmenu,'Enable','off');
    
    set(S.enable_Tailswing_toggle,'String','Deselected');
    set(S.enable_Tailswing_toggle,'BackgroundColor','default');
    set(S.enable_Tailswing_toggle,'value',0);
    set(S.tailswing_results_popupmenu,'Enable','off');
    
    set(S.enable_Tyrefriction_toggle,'String','Deselected');
    set(S.enable_Tyrefriction_toggle,'BackgroundColor','default');
    set(S.enable_Tyrefriction_toggle,'value',0);
    set(S.tyrefriction_results_popupmenu,'Enable','off');
    
    set(S.enable_Sidewind_toggle,'String','Deselected');
    set(S.enable_Sidewind_toggle,'BackgroundColor','default');
    set(S.enable_Sidewind_toggle,'value',0);
    set(S.sidewind_results_popupmenu,'Enable','off');
    
    set(S.enable_Turn90R8_toggle,'String','Deselected');
    set(S.enable_Turn90R8_toggle,'BackgroundColor','default');
    set(S.enable_Turn90R8_toggle,'value',0);
    set(S.turn90r8_results_popupmenu,'Enable','off');
    
    set(S.enable_Rollover_toggle,'String','Deselected');
    set(S.enable_Rollover_toggle,'BackgroundColor','default');
    set(S.enable_Rollover_toggle,'value',0);
    set(S.rollover_results_popupmenu,'Enable','off');
    
    set(S.enable_Rearward_toggle,'String','Deselected');
    set(S.enable_Rearward_toggle,'BackgroundColor','default');
    set(S.enable_Rearward_toggle,'value',0);
    set(S.rearward_results_popupmenu,'Enable','off');
    set(S.rollover_popupmenu,'Enable','off');
    set(S.rolloverresults_checkbox,'Enable','off');
    set(S.rollover_edit,'Enable','off');
    
    set(S.enable_Offtracking_toggle,'String','Deselected');
    set(S.enable_Offtracking_toggle,'BackgroundColor','default');
    set(S.enable_Offtracking_toggle,'value',0);
    set(S.offtracking_results_popupmenu,'Enable','off');
    
    set(S.enable_Yawdamping_toggle,'String','Deselected');
    set(S.enable_Yawdamping_toggle,'BackgroundColor','default');
    set(S.enable_Yawdamping_toggle,'value',0);
    set(S.yawdamping_results_popupmenu,'Enable','off');
    
    set(S.enable_Handling_toggle,'String','Deselected');
    set(S.enable_Handling_toggle,'BackgroundColor','default');
    set(S.enable_Handling_toggle,'value',0);
    set(S.handling_results_popupmenu,'Enable','off');
end

function enable_statics_callback(source,eventdata)
global S results_statics

selected = get(S.enable_statics_toggle, 'value');

if selected
    if iscell(results_statics) == 1 
        set(S.enable_statics_toggle,'String','Selected');
        set(S.enable_statics_toggle,'BackgroundColor','g');
        set(S.statics_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_statics_toggle,'String','Deselected');
    set(S.enable_statics_toggle,'BackgroundColor','default');
    set(S.statics_results_popupmenu,'Enable','off');
end

function enable_CRG_callback(source,eventdata)
global S results_CRG

selected = get(S.enable_CRG_toggle, 'value');

if selected
    if iscell(results_CRG) == 1 
        set(S.enable_CRG_toggle,'String','Selected');
        set(S.enable_CRG_toggle,'BackgroundColor','g');
        set(S.CRG_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_CRG_toggle,'String','Deselected');
    set(S.enable_CRG_toggle,'BackgroundColor','default');
    set(S.CRG_results_popupmenu,'Enable','off');
end

function enable_startability_callback(source,eventdata)
global S results_startability

selected = get(S.enable_startability_toggle, 'value');

if selected
    if iscell(results_startability) == 1
        set(S.enable_startability_toggle,'String','Selected');
        set(S.enable_startability_toggle,'BackgroundColor','g');
        set(S.startability_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_startability_toggle,'String','Deselected');
    set(S.enable_startability_toggle,'BackgroundColor','default');
    set(S.startability_results_popupmenu,'Enable','off');
end

function enable_gradeability_callback(source,eventdata)
global S results_gradeability_motion results_gradeability_speed

selected = get(S.enable_gradeability_toggle, 'value');

if selected
    if iscell(results_gradeability_motion) == 1 && iscell(results_gradeability_speed) == 1
        set(S.enable_gradeability_toggle,'String','Selected');
        set(S.enable_gradeability_toggle,'BackgroundColor','g');
        set(S.gradeability_speed_results_popupmenu,'Enable','on');
        set(S.gradeability_motion_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_gradeability_toggle,'String','Deselected');
    set(S.enable_gradeability_toggle,'BackgroundColor','default');
    set(S.gradeability_speed_results_popupmenu,'Enable','off');
    set(S.gradeability_motion_results_popupmenu,'Enable','off');

end

function enable_acceleration_callback(source,eventdata)
global S results_acceleration

selected = get(S.enable_acceleration_toggle, 'value');

if selected
    if iscell(results_acceleration) == 1
        set(S.enable_acceleration_toggle,'String','Selected');
        set(S.enable_acceleration_toggle,'BackgroundColor','g');
        set(S.acceleration_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_acceleration_toggle,'String','Deselected');
    set(S.enable_acceleration_toggle,'BackgroundColor','default');
    set(S.acceleration_results_popupmenu,'Enable','off');
end

function enable_overtaking_callback(source,eventdata)
global S results_overtaking

selected = get(S.enable_overtaking_toggle, 'value');

if selected
    if iscell(results_overtaking) == 1
        set(S.enable_overtaking_toggle,'String','Selected');
        set(S.enable_overtaking_toggle,'BackgroundColor','g');
        set(S.overtaking_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_overtaking_toggle,'String','Deselected');
    set(S.enable_overtaking_toggle,'BackgroundColor','default');
    set(S.overtaking_results_popupmenu,'Enable','off');
end

function enable_tracking_callback(source,eventdata)
global S results_tracking

selected = get(S.enable_tracking_toggle, 'value');

if selected
    if iscell(results_tracking) == 1
        set(S.enable_tracking_toggle,'String','Selected');
        set(S.enable_tracking_toggle,'BackgroundColor','g');
        set(S.tracking_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_tracking_toggle,'String','Deselected');
    set(S.enable_tracking_toggle,'BackgroundColor','default');
    set(S.tracking_results_popupmenu,'Enable','off');
end

function enable_directional_callback(source,eventdata)
global S results_directional

selected = get(S.enable_directional_toggle, 'value');

if selected
    if iscell(results_directional) == 1
        set(S.enable_directional_toggle,'String','Selected');
        set(S.enable_directional_toggle,'BackgroundColor','g');
        set(S.directional_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_directional_toggle,'String','Deselected');
    set(S.enable_directional_toggle,'BackgroundColor','default');
    set(S.directional_results_popupmenu,'Enable','off');
end

function enable_ridequality_callback(source,eventdata)
global S results_ridequality

selected = get(S.enable_ridequality_toggle, 'value');

if selected
    if iscell(results_ridequality) == 1
        set(S.enable_ridequality_toggle,'String','Selected');
        set(S.enable_ridequality_toggle,'BackgroundColor','g');
        set(S.ridequality_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_ridequality_toggle,'String','Deselected');
    set(S.enable_ridequality_toggle,'BackgroundColor','default');
    set(S.ridequality_results_popupmenu,'Enable','off');
end

function enable_sweptpath_callback(source,eventdata)
global S results_sweptpath

selected = get(S.enable_sweptpath_toggle, 'value');

if selected
    if iscell(results_sweptpath) == 1
        set(S.enable_sweptpath_toggle,'String','Selected');
        set(S.enable_sweptpath_toggle,'BackgroundColor','g');
        set(S.sweptpath_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_sweptpath_toggle,'String','Deselected');
    set(S.enable_sweptpath_toggle,'BackgroundColor','default');
    set(S.sweptpath_results_popupmenu,'Enable','off');
end

function enable_sweptpath360_callback(source,eventdata)
global S results_sweptpath360

selected = get(S.enable_sweptpath360_toggle, 'value');

if selected
    if iscell(results_sweptpath360) == 1
        set(S.enable_sweptpath360_toggle,'String','Selected');
        set(S.enable_sweptpath360_toggle,'BackgroundColor','g');
        set(S.sweptpath360_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_sweptpath360_toggle,'String','Deselected');
    set(S.enable_sweptpath360_toggle,'BackgroundColor','default');
    set(S.sweptpath360_results_popupmenu,'Enable','off');
end

function enable_frontalswing_callback(source,eventdata)
global S results_frontalswing

selected = get(S.enable_Frontalswing_toggle, 'value');

if selected
    if iscell(results_frontalswing) == 1
        set(S.enable_Frontalswing_toggle,'String','Selected');
        set(S.enable_Frontalswing_toggle,'BackgroundColor','g');
        set(S.frontalswing_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_Frontalswing_toggle,'String','Deselected');
    set(S.enable_Frontalswing_toggle,'BackgroundColor','default');
    set(S.frontalswing_results_popupmenu,'Enable','off');
end

function enable_tailswing_callback(source,eventdata)
global S results_tailswing

selected = get(S.enable_Tailswing_toggle, 'value');

if selected
    if iscell(results_tailswing) == 1
        set(S.enable_Tailswing_toggle,'String','Selected');
        set(S.enable_Tailswing_toggle,'BackgroundColor','g');
        set(S.tailswing_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_Tailswing_toggle,'String','Deselected');
    set(S.enable_Tailswing_toggle,'BackgroundColor','default');
    set(S.tailswing_results_popupmenu,'Enable','off');
end

function enable_tyrefriction_callback(source,eventdata)
global S results_tyrefriction

selected = get(S.enable_Tyrefriction_toggle, 'value');

if selected
    if iscell(results_tyrefriction) == 1
        set(S.enable_Tyrefriction_toggle,'String','Selected');
        set(S.enable_Tyrefriction_toggle,'BackgroundColor','g');
        set(S.tyrefriction_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_Tyrefriction_toggle,'String','Deselected');
    set(S.enable_Tyrefriction_toggle,'BackgroundColor','default');
    set(S.tyrefriction_results_popupmenu,'Enable','off');
end

function enable_sidewind_callback(source,eventdata)
global S results_sidewind

selected = get(S.enable_Sidewind_toggle, 'value');

if selected
    if iscell(results_sidewind) == 1
        set(S.enable_Sidewind_toggle,'String','Selected');
        set(S.enable_Sidewind_toggle,'BackgroundColor','g');
        set(S.sidewind_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_Sidewind_toggle,'String','Deselected');
    set(S.enable_Sidewind_toggle,'BackgroundColor','default');
    set(S.sidewind_results_popupmenu,'Enable','off');
end

function enable_turn90R8_callback(source,eventdata)
global S results_turn90r8

selected = get(S.enable_Turn90R8_toggle, 'value');

if selected
    if iscell(results_turn90r8) == 1
        set(S.enable_Turn90R8_toggle,'String','Selected');
        set(S.enable_Turn90R8_toggle,'BackgroundColor','g');
        set(S.turn90r8_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_Turn90R8_toggle,'String','Deselected');
    set(S.enable_Turn90R8_toggle,'BackgroundColor','default');
    set(S.turn90r8_results_popupmenu,'Enable','off');
end

function enable_rollover_callback(source,eventdata)
global S results_rollover

selected = get(S.enable_Rollover_toggle, 'value');

if selected
    if iscell(results_rollover) == 1
        set(S.enable_Rollover_toggle,'String','Selected');
        set(S.enable_Rollover_toggle,'BackgroundColor','g');
        set(S.rollover_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_Rollover_toggle,'String','Deselected');
    set(S.enable_Rollover_toggle,'BackgroundColor','default');
    set(S.rollover_results_popupmenu,'Enable','off');
end

function enable_rearward_callback(source,eventdata)
global S results_rearward

selected = get(S.enable_Rearward_toggle, 'value');

if selected
    if iscell(results_rearward) == 1
        set(S.enable_Rearward_toggle,'String','Selected');
        set(S.enable_Rearward_toggle,'BackgroundColor','g');
        set(S.rearward_results_popupmenu,'Enable','on');
        set(S.rollover_popupmenu,'Enable','on');
        set(S.rolloverresults_checkbox,'Enable','on');
        set(S.rolloverresults_checkbox,'Value',1);
    end
else
    set(S.enable_Rearward_toggle,'String','Deselected');
    set(S.enable_Rearward_toggle,'BackgroundColor','default');
    set(S.rearward_results_popupmenu,'Enable','off');
    set(S.rollover_popupmenu,'Enable','off');
    set(S.rolloverresults_checkbox,'Enable','off');
    set(S.rollover_edit,'Enable','off');
end

function enable_offtracking_callback(source,eventdata)
global S results_offtracking

selected = get(S.enable_Offtracking_toggle, 'value');

if selected
    if iscell(results_offtracking) == 1
    set(S.enable_Offtracking_toggle,'String','Selected');
    set(S.enable_Offtracking_toggle,'BackgroundColor','g');
    set(S.offtracking_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_Offtracking_toggle,'String','Deselected');
    set(S.enable_Offtracking_toggle,'BackgroundColor','default');
    set(S.offtracking_results_popupmenu,'Enable','off');
end

function enable_yawdamping_callback(source,eventdata)
global S results_yawdamping

selected = get(S.enable_Yawdamping_toggle, 'value');

if selected
    if iscell(results_yawdamping) == 1
        set(S.enable_Yawdamping_toggle,'String','Selected');
        set(S.enable_Yawdamping_toggle,'BackgroundColor','g');
        set(S.yawdamping_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_Yawdamping_toggle,'String','Deselected');
    set(S.enable_Yawdamping_toggle,'BackgroundColor','default');
    set(S.yawdamping_results_popupmenu,'Enable','off');
end

function enable_handling_callback(source,eventdata)
global S results_handling

selected = get(S.enable_Handling_toggle, 'value');

if selected
    if iscell(results_handling) == 1
        set(S.enable_Handling_toggle,'String','Selected');
        set(S.enable_Handling_toggle,'BackgroundColor','g');
        set(S.handling_results_popupmenu,'Enable','on');
    end
else
    set(S.enable_Handling_toggle,'String','Deselected');
    set(S.enable_Handling_toggle,'BackgroundColor','default');
    set(S.handling_results_popupmenu,'Enable','off');
end

function Back_callback(source,eventdata) 
hWait = figure('NumberTitle','off','Name','LHV Tool',...
             'color','w','toolbar','none','menubar','none','Units','Normalized',...
             'Position',[0.2 0.15 0.8 0.75]);  
pause(0.5)         
robot = java.awt.Robot; 
robot.keyPress(java.awt.event.KeyEvent.VK_ALT);      %// send ALT
robot.keyPress(java.awt.event.KeyEvent.VK_SPACE);    %// send SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_SPACE);  %// release SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);    %// release ALT
robot.keyPress(java.awt.event.KeyEvent.VK_X);        %// send X
robot.keyRelease(java.awt.event.KeyEvent.VK_X);      %// release X         
         
iconsClassName = 'com.mathworks.widgets.BusyAffordance$AffordanceSize';
iconsSizeEnums = javaMethod('values',iconsClassName);
SIZE_32x32 = iconsSizeEnums(2);  % (1) = 16x16,  (2) = 32x32
jObj = com.mathworks.widgets.BusyAffordance(SIZE_32x32, 'Please wait...');  % icon, label
jObj.setPaintsWhenStopped(true);  % default = false
jObj.useWhiteDots(false);         % default = false (true is good for dark backgrounds)
javacomponent(jObj.getComponent, [850,500,200,100], hWait);
jObj.start;     
pause(1)
closereq
Start_menu
jObj.stop;
close(hWait)

function simulate_callback(source,eventdata)
hWait = figure('NumberTitle','off','Name','LHV Tool',...
             'color','w','toolbar','none','menubar','none','Units','Normalized',...
             'Position',[0.2 0.15 0.8 0.75]);  
pause(0.5)         
robot = java.awt.Robot; 
robot.keyPress(java.awt.event.KeyEvent.VK_ALT);      %// send ALT
robot.keyPress(java.awt.event.KeyEvent.VK_SPACE);    %// send SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_SPACE);  %// release SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);    %// release ALT
robot.keyPress(java.awt.event.KeyEvent.VK_X);        %// send X
robot.keyRelease(java.awt.event.KeyEvent.VK_X);      %// release X         
         
iconsClassName = 'com.mathworks.widgets.BusyAffordance$AffordanceSize';
iconsSizeEnums = javaMethod('values',iconsClassName);
SIZE_32x32 = iconsSizeEnums(2);  % (1) = 16x16,  (2) = 32x32
jObj = com.mathworks.widgets.BusyAffordance(SIZE_32x32, 'Please wait...');  % icon, label
jObj.setPaintsWhenStopped(true);  % default = false
jObj.useWhiteDots(false);         % default = false (true is good for dark backgrounds)
javacomponent(jObj.getComponent, [850,500,200,100], hWait);
jObj.start;     
pause(1)
global S c p results rollover_filename Truckname Excelsave custom
global results_startability results_acceleration results_CRG
global results_overtaking results_tracking results_directional results_ridequality
global results_sweptpath results_sweptpath360 results_frontalswing results_tailswing
global results_tyrefriction results_sidewind results_turn90r8 results_rollover results_rearward
global results_offtracking results_yawdamping results_handling results_gradeability_motion results_gradeability_speed
global handling_selected yawdamping_selected offtracking_selected rearward_selected 
global rollover_selected turn90R8_selected sidewind_selected friction_selected 
global tailswing_selected frontalswing_selected sweptpath360_selected sweptpath_selected 
global ridequality_selected directional_selected tracking_selected overtaking_selected 
global acceleration_selected gradeability_selected startability_selected CRG_selected
global statics_results startability_results gradeability_results_motion acceleration_results overtaking_results
global tracking_results directional_results ridequality_results tailswing_results frontalswing_results 
global tyrefriction_results sidewind_results sweptpath_results sweptpath360_results turn90r8_results
global rollover_results rearward_results offtracking_results yawdamping_results handling_results
global static startability gradeability acceleration overtaking tracking directional ridequality
global sweptpath sweptpath360 frontalswing tailswing steertyrefriction turn90R8 sidewind
global ExcelFileName rollover rearward offtracking yawdamping handling gradeability_results_speed
global start_sim acc_sim tracking_sim ridequality_sim sweptpath_sim frontalswing_sim tailswing_sim
global tyrefriction_sim rollover_sim rearward_sim offtracking_sim yawdamping_sim handling_sim 
global directional_sim sidewind_sim sweptpath360_sim turn90r8_sim  CRG_results
global start_wrl acc_wrl tracking_wrl ridequality_wrl sweptpath_wrl frontalswing_wrl tailswing_wrl
global tyrefriction_wrl rollover_wrl rearward_wrl offtracking_wrl yawdamping_wrl handling_wrl 
global directional_wrl sidewind_wrl sweptpath360_wrl turn90r8_wrl CRG CRG_wrl CRG_sim
global grade_mot_sim grade_mot_wrl grade_speed_sim grade_speed_wrl statics_selected results_statics
results = 1;

if Excelsave == 1
    fid = fopen(ExcelFileName, 'a');
    if fid ~= -1
        fclose(fid);
    else
        while (fid == -1)
            errormsg = strcat('the file: ', ExcelFileName, ' is open. please close it!');
            waitfor(msgbox(errormsg,'Error'));
            fid = fopen(ExcelFileName, 'a');
        end
        fclose(fid);
    end
end
Truckname = get(S.Truckname_edit,'String');

statics_selected = get(S.enable_statics_toggle, 'value');
CRG_selected = get(S.enable_CRG_toggle, 'value');
startability_selected = get(S.enable_startability_toggle, 'value');
gradeability_selected = get(S.enable_gradeability_toggle, 'value');
acceleration_selected = get(S.enable_acceleration_toggle, 'value');
overtaking_selected = get(S.enable_overtaking_toggle, 'value');
tracking_selected = get(S.enable_tracking_toggle, 'value');
directional_selected = get(S.enable_directional_toggle, 'value');
ridequality_selected = get(S.enable_ridequality_toggle, 'value');
sweptpath_selected = get(S.enable_sweptpath_toggle, 'value');
sweptpath360_selected = get(S.enable_sweptpath360_toggle, 'value');
frontalswing_selected = get(S.enable_Frontalswing_toggle, 'value');
tailswing_selected = get(S.enable_Tailswing_toggle, 'value');
friction_selected = get(S.enable_Tyrefriction_toggle, 'value');
sidewind_selected = get(S.enable_Sidewind_toggle, 'value');
turn90R8_selected = get(S.enable_Turn90R8_toggle, 'value');
rollover_selected = get(S.enable_Rollover_toggle, 'value');
rearward_selected = get(S.enable_Rearward_toggle, 'value');
offtracking_selected = get(S.enable_Offtracking_toggle, 'value');
yawdamping_selected = get(S.enable_Yawdamping_toggle, 'value');
handling_selected = get(S.enable_Handling_toggle, 'value');

if iscell(results_statics) == 1 && get(S.enable_statics_toggle,'value') == 1
    statics_data = results_statics{get(S.statics_results_popupmenu,'Value')};
    statics_results = statics_data;
    custom = 1;
    CRG = 11;
 end

 if iscell(results_CRG) == 1 && get(S.enable_CRG_toggle,'value') == 1
    CRG_data = results_CRG{get(S.CRG_results_popupmenu,'Value')};
    CRG_results = CRG_data;
    custom = 1;
    CRG = 11;
        
    dirName = ['simresults\CRG\LZV_custom\',CRG_results];
    files = dir( fullfile(dirName,'*.wrl') );
    CRG_wrl = files.name;
    
    FileNames = dir(['simresults\CRG\LZV_custom\',CRG_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    CRG_sim = NewFiles;  
end

if iscell(results_startability) == 1 && get(S.enable_startability_toggle,'value') == 1
    startability_data = results_startability{get(S.startability_results_popupmenu,'Value')};
    startability_results = startability_data;
    custom = 1;
    startability = 11;
    
    dirName = ['simresults\C1_Startability\LZV_custom\',startability_results];
    files = dir( fullfile(dirName,'*.wrl') );
    start_wrl = files.name;
    
    FileNames = dir(['simresults\C1_Startability\LZV_custom\',startability_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    start_sim = NewFiles;   
end

if iscell(results_gradeability_motion) == 1 && iscell(results_gradeability_speed) && get(S.enable_gradeability_toggle,'value') == 1
    speedFile = results_gradeability_speed{get(S.gradeability_speed_results_popupmenu,'Value')};
    motionFile = results_gradeability_motion{get(S.gradeability_motion_results_popupmenu,'Value')};
    gradeability_results_motion = motionFile;
    gradeability_results_speed = speedFile;
    custom = 1;
    gradeability = 11;

    dirName = ['simresults\C2_Gradeability\Speed\LZV_custom\',gradeability_results_speed];
    files = dir( fullfile(dirName,'*.wrl') );
    grade_speed_wrl = files.name;
    
    FileNames = dir(['simresults\C2_Gradeability\Speed\LZV_custom\',gradeability_results_speed]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    grade_speed_sim = NewFiles;   
    
    dirName = ['simresults\C2_Gradeability\Motion\LZV_custom\',gradeability_results_motion];
    files = dir( fullfile(dirName,'*.wrl') );
    grade_mot_wrl = files.name;
    
    FileNames = dir(['simresults\C2_Gradeability\Motion\LZV_custom\',gradeability_results_motion]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    grade_mot_sim = NewFiles;     
end

if iscell(results_acceleration) == 1 && get(S.enable_acceleration_toggle,'value') == 1
    acceleration_data = results_acceleration{get(S.acceleration_results_popupmenu,'Value')};
    acceleration_results = acceleration_data;
    custom = 1;
    acceleration = 11;
    
    dirName = ['simresults\C3_Acceleration\LZV_custom\',acceleration_results];
    files = dir( fullfile(dirName,'*.wrl') );
    acc_wrl = files.name;
    
    FileNames = dir(['simresults\C3_Acceleration\LZV_custom\',acceleration_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    acc_sim = NewFiles;          
end

if iscell(results_overtaking) == 1 && get(S.enable_overtaking_toggle,'value') == 1
    overtaking_data = results_overtaking{get(S.overtaking_results_popupmenu,'Value')};
    overtaking_results = overtaking_data;
    custom = 1;
    overtaking = 11;           
end

if iscell(results_tracking) == 1 && get(S.enable_tracking_toggle,'value') == 1
    tracking_data = results_tracking{get(S.tracking_results_popupmenu,'Value')};
    tracking_results = tracking_data;
    custom = 1;
    tracking = 11;
    
    dirName = ['simresults\C5_TrackingAbility\LZV_custom\',tracking_results];
    files = dir( fullfile(dirName,'*.wrl') );
    tracking_wrl = files.name;
    
    FileNames = dir(['simresults\C5_TrackingAbility\LZV_custom\',tracking_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    tracking_sim = NewFiles;  
end

if iscell(results_directional) == 1 && get(S.enable_directional_toggle,'value') == 1
    directional_data = results_directional{get(S.directional_results_popupmenu,'Value')};
    directional_results = directional_data;
    custom = 1;
    directional = 11;
    
    dirName = ['simresults\C16_DirectionalStability\LZV_custom\',directional_results];
    files = dir( fullfile(dirName,'*.wrl') );
    directional_wrl = files.name;
    
    FileNames = dir(['simresults\C16_DirectionalStability\LZV_custom\',directional_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    directional_sim = NewFiles;              
end

if iscell(results_ridequality) == 1 && get(S.enable_ridequality_toggle,'value') == 1
    ridequality_data = results_ridequality{get(S.ridequality_results_popupmenu,'Value')};
    ridequality_results = ridequality_data;
    custom = 1;
    ridequality = 11;
    
    dirName = ['simresults\C6_RideQuality\LZV_custom\',ridequality_results];
    files = dir( fullfile(dirName,'*.wrl') );
    ridequality_wrl = files.name;
    
    FileNames = dir(['simresults\C6_RideQuality\LZV_custom\',ridequality_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    ridequality_sim = NewFiles;                
end

if iscell(results_sweptpath) == 1 && get(S.enable_sweptpath_toggle,'value') == 1
    sweptpath_data = results_sweptpath{get(S.sweptpath_results_popupmenu,'Value')};
    sweptpath_results = sweptpath_data;
    custom = 1;
    sweptpath = 11;
    
    dirName = ['simresults\C7_SweptPath\LZV_custom\',sweptpath_results];
    files = dir( fullfile(dirName,'*.wrl') );
    sweptpath_wrl = files.name;
    
    FileNames = dir(['simresults\C7_SweptPath\LZV_custom\',sweptpath_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    sweptpath_sim = NewFiles;          
end

if iscell(results_sweptpath360) == 1 && get(S.enable_sweptpath360_toggle,'value') == 1
    sweptpath360_data = results_sweptpath360{get(S.sweptpath360_results_popupmenu,'Value')};
    sweptpath360_results = sweptpath360_data;
    custom = 1;
    sweptpath360 = 11;
    
    dirName = ['simresults\SweptPath360\LZV_custom\',sweptpath360_results];
    files = dir( fullfile(dirName,'*.wrl') );
    sweptpath360_wrl = files.name;
    
    FileNames = dir(['simresults\SweptPath360\LZV_custom\',sweptpath360_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    sweptpath360_sim = NewFiles;  
end

if iscell(results_frontalswing) == 1 && get(S.enable_Frontalswing_toggle,'value') == 1
    frontalswing_data = results_frontalswing{get(S.frontalswing_results_popupmenu,'Value')};
    frontalswing_results = frontalswing_data;
    custom = 1;
    frontalswing = 11;
    
    dirName = ['simresults\C8_FrontalSwing\LZV_custom\',frontalswing_results];
    files = dir( fullfile(dirName,'*.wrl') );
    frontalswing_wrl = files.name;
    
    FileNames = dir(['simresults\C8_FrontalSwing\LZV_custom\',frontalswing_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    frontalswing_sim = NewFiles;      
end

emptypu = iscell(results_tailswing);
if emptypu == 1 && get(S.enable_Tailswing_toggle,'value') == 1
    tailswing_data = results_tailswing{get(S.tailswing_results_popupmenu,'Value')};
    tailswing_results = tailswing_data;
    custom = 1;
    tailswing = 11;
    
    dirName = ['simresults\C9_TailSwing\LZV_custom\',tailswing_results];
    files = dir( fullfile(dirName,'*.wrl') );
    tailswing_wrl = files.name;
    
    FileNames = dir(['simresults\C9_TailSwing\LZV_custom\',tailswing_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    tailswing_sim = NewFiles;          
end

if iscell(results_tyrefriction) == 1 && get(S.enable_Tyrefriction_toggle,'value') == 1
    tyrefriction_data = results_tyrefriction{get(S.tyrefriction_results_popupmenu,'Value')};
    tyrefriction_results = tyrefriction_data;
    custom = 1;
    steertyrefriction = 11;
    
    dirName = ['simresults\C10_TyreFriction\LZV_custom\',tyrefriction_results];
    files = dir( fullfile(dirName,'*.wrl') );
    tyrefriction_wrl = files.name;
    
    FileNames = dir(['simresults\C10_TyreFriction\LZV_custom\',tyrefriction_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    tyrefriction_sim = NewFiles;               
end

if iscell(results_sidewind) == 1 && get(S.enable_Sidewind_toggle,'value') == 1
    sidewind_data = results_sidewind{get(S.sidewind_results_popupmenu,'Value')};
    sidewind_results = sidewind_data;
    custom = 1;
    sidewind = 11;
    
    dirName = ['simresults\Sidewind\LZV_custom\',sidewind_results];
    files = dir( fullfile(dirName,'*.wrl') );
    sidewind_wrl = files.name;
    
    FileNames = dir(['simresults\Sidewind\LZV_custom\',sidewind_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    sidewind_sim = NewFiles; 
end

if iscell(results_turn90r8) == 1 && get(S.enable_Turn90R8_toggle,'value') == 1
    turn90r8_data = results_turn90r8{get(S.turn90r8_results_popupmenu,'Value')};
    turn90r8_results = turn90r8_data;
    custom = 1;
    turn90R8 = 11;
    
    dirName = ['simresults\Turn90R8\LZV_custom\',turn90r8_results];
    files = dir( fullfile(dirName,'*.wrl') );
    turn90r8_wrl = files.name;
    
    FileNames = dir(['simresults\Turn90R8\LZV_custom\',turn90r8_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    turn90r8_sim = NewFiles;           
end

if iscell(results_rollover) == 1 && get(S.enable_Rollover_toggle,'value') == 1
    rollover_data = results_rollover{get(S.rollover_results_popupmenu,'Value')};
    rollover_results = rollover_data;
    custom = 1;
    rollover = 11;
    
    dirName = ['simresults\C11_Rollover\LZV_custom\',rollover_results];
    files = dir( fullfile(dirName,'*.wrl') );
    rollover_wrl = files.name;
    
    FileNames = dir(['simresults\C11_Rollover\LZV_custom\',rollover_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    rollover_sim = NewFiles;                 
end

if iscell(results_rearward) == 1 && get(S.enable_Rearward_toggle,'value') == 1
    rearward_data = results_rearward{get(S.rearward_results_popupmenu,'Value')};
    rearward_results = rearward_data;
    custom = 1;
    rearward = 11;
    
    dirName = ['simresults\C12_RearwardAmpli\LZV_custom\',rearward_results];
    files = dir( fullfile(dirName,'*.wrl') );
    rearward_wrl = files.name;
    
    FileNames = dir(['simresults\C12_RearwardAmpli\LZV_custom\',rearward_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    rearward_sim = NewFiles;              
end

if iscell(results_offtracking) == 1 && get(S.enable_Offtracking_toggle,'value') == 1
    offtracking_data = results_offtracking{get(S.offtracking_results_popupmenu,'Value')};
    offtracking_results = offtracking_data;
    custom = 1;
    offtracking = 11;
    
    dirName = ['simresults\C13_Offtracking\LZV_custom\',offtracking_results];
    files = dir( fullfile(dirName,'*.wrl') );
    offtracking_wrl = files.name;
    
    FileNames = dir(['simresults\C13_Offtracking\LZV_custom\',offtracking_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    offtracking_sim = NewFiles;          
end

if iscell(results_yawdamping) == 1 && get(S.enable_Yawdamping_toggle,'value') == 1
    yawdamping_data = results_yawdamping{get(S.yawdamping_results_popupmenu,'Value')};
    yawdamping_results = yawdamping_data;
    custom = 1;
    yawdamping = 11;
    
    dirName = ['simresults\C14_YawDamping\LZV_custom\',yawdamping_results];
    files = dir( fullfile(dirName,'*.wrl') );
    yawdamping_wrl = files.name;
    
    FileNames = dir(['simresults\C14_YawDamping\LZV_custom\',yawdamping_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    yawdamping_sim = NewFiles;                 
end

if iscell(results_handling) == 1 && get(S.enable_Handling_toggle,'value') == 1
    handling_data = results_handling{get(S.handling_results_popupmenu,'Value')};
    handling_results = handling_data;
    custom = 1;
    handling = 11;
    
    dirName = ['simresults\C15_HandlingQuality\LZV_custom\',handling_results];
    files = dir( fullfile(dirName,'*.wrl') );
    handling_wrl = files.name;
    
    FileNames = dir(['simresults\C15_HandlingQuality\LZV_custom\',handling_results]);
    NewFiles = {};
    filenames = {FileNames.name}';
    for k1 = 1:size(filenames,1)
        A = strfind(filenames{k1}, '_anim');
        if ~isempty(A)
            NewFiles = filenames{k1};
        end
    end
    handling_sim = NewFiles;              
end

closereq;
custom_post_processing       
pause(1)
figure(S.f)
robot = java.awt.Robot; 
robot.keyPress(java.awt.event.KeyEvent.VK_ALT);      %// send ALT
robot.keyPress(java.awt.event.KeyEvent.VK_SPACE);    %// send SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_SPACE);  %// release SPACE
robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);    %// release ALT
robot.keyPress(java.awt.event.KeyEvent.VK_X);        %// send X
robot.keyRelease(java.awt.event.KeyEvent.VK_X);      %// release X
jObj.stop;
close(hWait)

function Truckname(source,eventdata)
global S name

String = get(S.Truckname_edit, 'String');
 if isempty(String)
     if isempty(name)
        [MonthNum, MonthString] = month(date);
        Second = second(datetime);
        x = sprintf('%0.0f\n', Second);
        secs = str2num(x);
        Minute = minute(datetime);
        Hour = hour(datetime);
        Day = day(date);
        Month = MonthString;
        Year = year(date);
        set(S.Truckname_edit,'String',[Month '_' num2str(Day) '_' num2str(Year) '_' num2str(Hour) '_' num2str(Minute) '_' num2str(secs)]);
     else
        set(S.Truckname_edit,'String',name);
     end
 end

function Excel(source,eventdata)
global Excelsave ExcelFileName S

Excel_status = get(S.Excel_results_toggle,'Value');
if Excel_status == 1
    set(S.Excel_results_toggle,'ForeGroundColor','g');
    set(S.Excel_results_toggle,'Value',1);
    Excelsave = 1;
    [ExcelFileName,PathName] = uigetfile('*.xlsx','Select an Excel file for appending the PBS data');
elseif Excel_status == 0
    set(S.Excel_results_toggle,'ForeGroundColor','default');
    set(S.Excel_results_toggle,'Value',0);
    Excelsave = 0;
end
function C16_directionalstability_postprocessing

global axle_trailer p NumberOfRows S results Excelsave ExcelFileName
global directional_results Truckname viewpoint_directional
global directional_filename directional_wrl

javaaddpath(which('MatlabGarbageCollector.jar'));
org.dt.matlab.utilities.JavaMemoryCleaner.clear(1);
clc;

%% Directional Stability tab lay-oxut

set(S.tab7,'Parent', S.tgroup);

S.tgroup2 = uitabgroup('Parent',S.tab7, 'tablocation', 'right');
S.PBs.tab = uitab('Parent', S.tgroup2, 'backgroundcolor','w', 'Title','PBS Data');
S.directional_visual_tab = uitab('Parent', S.tgroup2, 'backgroundcolor','w', 'Title','Visulaization');

S.back_button = uicontrol('parent', S.PBs.tab,...
                          'style','pushbutton',...
                          'BackgroundColor','w',...
                          'String','Back',...
                          'FontSize',10,...
                          'FontUnits','Normalized',...
                          'FontWeight','bold',...
                          'ForeGroundColor','r',...
                          'units','normalized',...
                          'position',[0.005 0.94 0.1 0.05],...
                          'Callback',@Back_callback);
                      
S.Directional_title = uicontrol('Parent',               S.PBs.tab,...
                                'Style',                'text',...
                                'String',               'Directional Stability Under Braking',...
                                'Backgroundcolor',      'w',...
                                'FontSize',             3,...
                                'FontUnits','Normalized',...
                                'FontWeight',           'bold',...
                                'Units',                'Normalized',...
                                'Position',             [.125 .75 .4 .2]);

S.Perf_Decele_panel = uipanel('Parent',             S.PBs.tab,...
                              'Units',              'Centimeters',...
                              'Position',           [0.5 12 10 3],...    
                              'backgroundcolor',    'w',...
                              'Title',              'Deceleration Performance Levels',...
                              'Units',              'Normalized',...
                              'FontWeight',         'bold',...
                              'FontSize',           10,...
                              'FontUnits','Normalized',...
                              'BorderWidth',        2,...
                              'BorderType',         'Line',...
                              'highlightcolor',     'k');

S.dist2stop_text = uicontrol('Parent',              S.Perf_Decele_panel,...
                             'Style',               'text',...
                             'String',              'Distance to stop (m)',...
                             'Backgroundcolor',     'w',...
                             'FontSize',            6,...
                             'FontUnits','Normalized',...
                             'Units',               'Normalized',...
                             'Position',            [0.025 .5 .25 .4]);

S.decele_text = uicontrol('Parent',             S.Perf_Decele_panel,...
                          'Style',              'text',...
                          'String',             'Average Deceleration (/g)',...
                          'Backgroundcolor',    'w',...
                          'FontSize',           6,...
                          'FontUnits','Normalized',...
                          'Units',              'Normalized',...
                          'Position',           [.3 .5 .325 .4]);                    

S.Level_text = uicontrol('Parent',              S.Perf_Decele_panel,...
                         'Style',               'text',...
                         'String',              'Level',...
                         'Backgroundcolor',     'w',...
                         'FontSize',            15,...
                         'FontUnits','Normalized',...
                         'Units',               'Normalized',...
                         'Position',            [.7 .65 .25 .15]);                                             

S.dist2stop_edit = uicontrol('Parent',              S.Perf_Decele_panel,...
                             'Style',               'edit',...
                             'Backgroundcolor',     'w',...
                             'FontSize',            12,...
                             'FontUnits','Normalized',...
                             'enable',              'off',...
                             'Units',               'Normalized',...
                             'Position',            [.05 .2 .2 .2]);

S.decele_edit = uicontrol('Parent',             S.Perf_Decele_panel,...
                          'Style',              'edit',...
                          'Backgroundcolor',    'w',...
                          'FontSize',           12,...
                          'FontUnits','Normalized',...
                          'enable',             'off',...
                          'Units',              'Normalized',...
                          'Position',           [.35 .2 .2 .2]);   

S.leveldecele_edit = uicontrol('Parent',            S.Perf_Decele_panel,...
                               'Style',             'edit',...
                               'Backgroundcolor',   'w',...
                               'FontSize',          12,...
                               'FontUnits','Normalized',...
                               'enable',            'off',...
                               'Units',             'Normalized',...
                               'Position',          [.65 .2 .3 .2]);                           

S.Perf_direct_panel = uipanel('Parent',             S.PBs.tab,...
                              'Units',              'Centimeters',...
                              'Position',           [11 12 8 3],...     
                              'backgroundcolor',    'w',...
                              'Title',              'Directional Stability Performance Levels',...
                              'Units',              'Normalized',...
                              'FontWeight',         'bold',...
                              'FontSize',           9,...
                              'FontUnits','Normalized',...
                              'BorderWidth',        2,...
                              'BorderType',         'Line',...
                              'highlightcolor',     'k');

S.swept_edit = uicontrol('Parent',              S.Perf_direct_panel,...
                         'Style',               'edit',...
                         'Backgroundcolor',     'w',...
                         'FontSize',            12,...
                         'FontUnits','Normalized',...
                         'enable',              'off',...
                         'Units',               'Normalized',...
                         'Position',            [.2 .2 .2 .2]);   

S.levelswept_edit = uicontrol('Parent',             S.Perf_direct_panel,...
                              'Style',              'edit',...
                              'Backgroundcolor',    'w',...
                              'FontSize',           12,...
                              'FontUnits','Normalized',...
                              'enable',             'off',...
                              'Units',              'Normalized',...
                              'Position',           [.6 .2 .3 .2]);                           

S.swept_text = uicontrol('Parent',              S.Perf_direct_panel,...
                         'Style',               'text',...
                         'String',              'Total Swept Width (m)',...
                         'Backgroundcolor',     'w',...
                         'FontSize',            12,...
                         'FontUnits','Normalized',...
                         'Units',               'Normalized',...
                         'Position',            [-0.075 .65 .75 .2]);                    

S.Level_text = uicontrol('Parent',              S.Perf_direct_panel,...
                         'Style',               'text',...
                         'String',              'Level',...
                         'Backgroundcolor',     'w',...
                         'FontSize',            12,...
                         'FontUnits','Normalized',...
                         'Units',               'Normalized',...
                         'Position',            [.625 .65 .2 .2]);   
                     
%% Visualization panel  
S.visual_directional_panel = uipanel('Parent',   S.directional_visual_tab,...
                         'Units',              'normalized',...
                         'Position',           [0 0 1 1],...
                         'BackgroundColor',    'w');                  

S.directional_nav_text =      uicontrol('Parent',           S.visual_directional_panel,...
                                      'Style',            'text',...
                                      'backgroundColor',  'w',...
                                      'Units',            'Normalized',...
                                      'FontWeight',       'bold',...
                                      'String',           'Navigation zones',...
                                      'FontSize',         10,...
                                      'FontUnits',        'Normalized',...
                                      'Position',         [0.55 0.95 0.1 0.05]);  
                                  
S.directional_nav_popup =       uicontrol('Parent',           S.visual_directional_panel,...
                                        'Style',            'popup',...
                                        'backgroundColor',  'w',...
                                        'Units',            'Normalized',...
                                        'FontWeight',       'bold',...
                                        'String',           {'On','Off'},...
                                        'FontSize',         10,...
                                        'FontUnits',        'Normalized',...
                                        'Position',         [0.55 0.9 0.1 0.05],...
                                        'Callback',         @directional_nav_callback); 
                                    
S.directional_view_text =       uicontrol('Parent',           S.visual_directional_panel,...
                                        'Style',            'text',...
                                        'backgroundColor',  'w',...
                                        'Units',            'Normalized',...
                                        'FontWeight',       'bold',...
                                        'FontSize',         10,...
                                        'String',           'Viewpoint',...
                                        'FontUnits',        'Normalized',...
                                        'Position',         [0.24 0.95 0.1 0.05]);
                                    
S.directional_view_popup =       uicontrol('Parent',           S.visual_directional_panel,...
                                         'Style',            'popup',...
                                         'backgroundColor',  'w',...
                                         'Units',            'Normalized',...
                                         'FontWeight',       'bold',...
                                         'FontSize',         10,...
                                         'String',           {'Top view','Side view','Rear view','Front view','Top rotating view'},...
                                         'FontUnits',        'Normalized',...
                                         'Value',            2,...
                                         'Position',         [0.25 0.9 0.1 0.05],...
                                         'Callback',         @directional_view_callback); 


S.directional_run_vis_push =    uicontrol('Parent',           S.visual_directional_panel,...
                                        'Style',            'toggle',...
                                        'backgroundColor',  'w',...
                                        'ForegroundColor',  'b',...
                                        'Units',            'Normalized',...
                                        'FontWeight',       'bold',...
                                        'FontSize',         10,...
                                        'FontUnits',        'Normalized',...
                                        'Value',            0,...
                                        'Position',         [0.7 0.9 0.05 0.05],...
                                        'Callback',         @run_directional_visualization_callback); 
                                    
S.directional_stop_vis_push =   uicontrol('Parent',           S.visual_directional_panel,...
                                        'Style',            'toggle',...
                                        'backgroundColor',  'w',...
                                        'ForegroundColor',  'b',...
                                        'Units',            'Normalized',...
                                        'FontWeight',       'bold',...
                                        'FontSize',         10,...
                                        'FontUnits',        'Normalized',...
                                        'Value',            1,...
                                        'Position',         [0.75 0.9 0.05 0.05],...
                                        'Callback',         @stop_directional_visualization_callback); 

S.directional_speed_string =    uicontrol('Parent',           S.visual_directional_panel,...
                                        'Style',            'text',...
                                        'backgroundColor',  'w',...
                                        'Units',            'Normalized',...
                                        'FontWeight',       'bold',...
                                        'String',           'Simulation speed',...
                                        'FontSize',         10,...
                                        'FontUnits',        'Normalized',...
                                        'Value',            0,...
                                        'Position',         [0.35 0.95 0.2 0.05]);
                                    
S.directional_speed_popup =     uicontrol('Parent',           S.visual_directional_panel,...
                                        'Style',            'popup',...
                                        'backgroundColor',  'w',...
                                        'Units',            'Normalized',...
                                        'FontWeight',       'bold',...
                                        'String',           {'Low','Normal','High'},...
                                        'FontSize',         10,...
                                        'Value',            2,...
                                        'FontUnits',        'Normalized',...
                                        'Position',         [0.375 0.9 0.1 0.05],...
                                        'Callback',         @directional_speed_callback); 
                                     
[a,~]=imread('play.jpg');
[r,e,~]=size(a); 
x=ceil(r/30); 
y=ceil(e/30); 
g=a(1:x:end,1:y:end,:);
g(g==255)=5.5*255;
set(S.directional_run_vis_push,'CData',g);

[a,~]=imread('stop.jpg');
[r,e,~]=size(a); 
x=ceil(r/30); 
y=ceil(e/30); 
g=a(1:x:end,1:y:end,:);
g(g==255)=5.5*255;
set(S.directional_stop_vis_push,'CData',g);

S.back_button = uicontrol('parent', S.visual_directional_panel,...
                          'style','pushbutton',...
                          'BackgroundColor','w',...
                          'String','Back',...
                          'FontSize',10,...
                          'FontUnits','Normalized',...
                          'FontWeight','bold',...
                          'ForeGroundColor','r',...
                          'units','normalized',...
                          'position',[0.005 0.9 0.1 0.05],...
                          'Callback',@Back_callback);                                        
                       
%% PBS Data
if results == 1
    dirName = ['simresults\C16_DirectionalStability\LZV_custom\',directional_results];
    files = dir( fullfile(dirName,'*.mat') );
    filename = files.name;
    load(filename)
else
    load(['simresults/C16_DirectionalStability/LZV_custom/',Truckname,'/',directional_filename])
end

lastaxle_acc=eval(strcat('s.trailer',num2str(p-1),'axle',num2str(axle_trailer(p-1)),'.acc(:,1)'));
tailright_x=eval(strcat('s.trailer',num2str(p-1),'.load.posright(:,1)'));
tailright_y=eval(strcat('s.trailer',num2str(p-1),'.load.posright(:,2)'));
tailleft_x=eval(strcat('s.trailer',num2str(p-1),'.load.posleft(:,1)'));
tailleft_y=eval(strcat('s.trailer',num2str(p-1),'.load.posleft(:,2)'));

Brake_torqueR = s.Tbr.steeraxle.right;
Brake_torqueL = s.Tbr.steeraxle.left;
slipR_steeraxle = (s.steeraxle1.tyre2.longitudinal.slip);
slipL_steeraxle = (s.steeraxle1.tyre1.longitudinal.slip);
throttle = s.inputs.throttle;
brake = s.inputs.valve.brake;
wheelvelR = (s.tyre.tractoromega(:,2).*s.Radius2);
wheelvelL = (s.tyre.tractoromega(:,1).*s.Radius1);
temps=s.time;
front_positionright_x=s.cabinfront.rightpos(:,1);
front_positionright_y=s.cabinfront.rightpos(:,2);
front_positionleft_x=s.cabinfront.leftpos(:,1);
front_positionleft_y=s.cabinfront.leftpos(:,2); 
 
positionx=s.steeraxle.pos(:,1);
positiony=s.steeraxle.pos(:,2);
steer=s.inputs.delta*180/pi;
vitesse=s.Vx;
idxstop=find(vitesse<0.01);
idxstart=find(temps>5);
stop=idxstop(1);
start=idxstart(1);

dist2stop=positionx(stop)-positionx(start);
acc=s.steeraxle1.acc(:,1);
firstaxle_acc=s.steeraxle1.acc(:,1);
acc=acc/9.81;
decele=0.5*(vitesse(1)*vitesse(1))/(9.81*dist2stop);

X=1:2:floor(positionx(stop));
min_y=zeros(1,length(X));
max_y=zeros(1,length(X));

    for k=1:length(X)
        for i=1:length(tailright_x)                     %tail
            if abs(tailright_x(i)-X(k))<2                %min - right
                if tailright_y(i)<min_y(k)
                    min_y(k)=tailright_y(i);
                end
            end
            if abs(tailleft_x(i)-X(k))<2                 %max - left
                if tailleft_y(i)>max_y(k)
                    max_y(k)=tailleft_y(i);
                end
            end
        end
        for i=1:length(front_positionright_x)           %front_position
            if abs(front_positionright_x(i)-X(k))<2      %min - right
                if front_positionright_y(i)<min_y(k)
                    min_y(k)=front_positionright_y(i);
                end
            end
            if abs(front_positionleft_x(i)-X(k))<2       %max - left
                if front_positionleft_y(i)>max_y(k)
                    max_y(k)=front_positionleft_y(i);
                end
            end
        end  
    end

    swept_min=abs(min(min_y));
    swept_max=abs(max(max_y));
    swept=(swept_max+swept_min); 

if decele>=0.40
    leveldecele='All access level';
elseif decele>=0.35
    leveldecele=1;
elseif decele>=0.30
    leveldecele=2;
elseif decele>=0.25
    leveldecele=3;
elseif decele>=0.20
    leveldecele=4;
else
    leveldecele=5;
end

decele=(round(decele*100))/100;
dist2stop=(round(dist2stop*100))/100;
set(S.decele_edit, 'string', num2str(decele));
set(S.leveldecele_edit, 'string', num2str(leveldecele));
set(S.dist2stop_edit, 'string', num2str(dist2stop));

if swept<=2.9
    levelswept=1;
elseif swept<=3.0
    levelswept=2;
elseif swept<=3.1
    levelswept=3;
elseif swept<=3.3
    levelswept=4;
else
    levelswept=5;
end

swept=(round(swept*100))/100;
set(S.swept_edit, 'string', num2str(swept));
set(S.levelswept_edit, 'string', num2str(levelswept));

%Steer angle
S.axes1 = axes('Parent',S.PBs.tab,'units','normalized','position',[.05 0.55 .225 .1]);
plot(S.axes1, temps,steer,'LineWidth',1.5);
xlabel('t [s]'); ylabel('steer [deg]'); title('Steer angle');
grid on;

%brake pedal
S.axes2 = axes('Parent',S.PBs.tab,'units','normalized','position',[.35 0.55 .225 .1]);
plot(S.axes2, temps, brake/8, 'LineWidth',1.5);
xlabel('t [s]'); ylabel('input [-]'); title('Brake input');
grid on;

%throttle
S.axes3 = axes('Parent',S.PBs.tab,'units','normalized','position',[.35 0.35 .225 .1]);
plot(S.axes3, temps, throttle, 'LineWidth',1.5);
xlabel('t [s]'); ylabel('input [-]'); title('Throttle input');
grid on;

%brake
S.axes4 = axes('Parent',S.PBs.tab,'units','normalized','position',[.825 0.1 .15 .3]);
p5 = plot(S.axes4, temps, Brake_torqueL, temps, Brake_torqueR);
p5(1).LineWidth = 1.5; p5(2).LineWidth = 1.5;
title('Brake torque first axle'); xlabel('t [s]'); ylabel('brake torque [Nm]');
legend('Left','Right','Location','best');
grid on;

% wheel velocity
S.axes5 = axes('Parent',S.PBs.tab,'units','normalized','position',[.625 0.5 .15 .45]);
p1 = plot(S.axes5, temps, wheelvelR, temps, vitesse, temps, wheelvelL);
p1(1).LineWidth = 1.5; p1(2).LineWidth = 1.5; p1(3).LineWidth = 1.5;
title('Velocity first axle'); xlabel('t [s]'); ylabel('velocity [m/s]'); 
legend('Right','Vehicle','Left','Location','best');
grid on;

% slip
S.axes6 = axes('Parent',S.PBs.tab,'units','normalized','position',[.05 0.1 .525 .15]);
p3 = plot(S.axes6, temps, slipR_steeraxle, temps, slipL_steeraxle);
p3(1).LineWidth = 1.5;
p3(2).LineWidth = 1.5;
title('Slip first axle'); xlabel('t [s]'); ylabel('Slip [-]');
legend('right', 'left','Location','best');
grid on;

%Forward velocity
S.axes7 = axes('Parent',S.PBs.tab,'units','normalized','position',[.05 0.35 .225 .1]);
plot(S.axes7, temps,(vitesse)*3.6,'LineWidth',1.5);
xlabel('t [s]'); ylabel('Vx [km/h]'); title('Forward velocity');
grid on;

idx=find(abs(vitesse-vitesse(1))>(1/3.6));

% Acceleration of the first and last axle
S.axes8 = axes('Parent',S.PBs.tab,'units','normalized','position',[.625 0.1 .15 .3]);
if numel(lastaxle_acc)~=0
    plot(S.axes8, temps,firstaxle_acc,'b-',temps,lastaxle_acc,'r','LineWidth',1.5); %Acceleration selon x
    legend('First axle','Last axle');
    title('Acceleration of the first and last axle');
elseif numel(lastaxle_acc)==0
    plot(S.axes8, temps,firstaxle_acc,'b-','LineWidth',1.5); %Acceleration selon x
    legend('First axle');
    title('Acceleration of the first axle');
end
xlabel('t [s]');
ylabel('ax [m/s2]');
grid on;

%Position of the LZV
S.axes9 = axes('Parent',S.PBs.tab,'units','normalized','position',[.825 0.5 .15 .45]);
plot(S.axes9, positiony,positionx,'r','LineWidth',1.5);
hold on
plot(S.axes9, min_y,X,'--b',max_y,X,'--b','LineWidth',1.5);
title('Position of the LZV (braking)');
legend('Position of the first axle','Swept Width');
ylabel('x [m]');
xlabel('y [m]');
grid on;
axis([-2.5 2.5 positionx(idx(1)) (round(max(X))+2)])

% Safe data in Excel file
if Excelsave == 1
    A = {decele,leveldecele,swept,levelswept};
    sheet = 1;
    x1Range = ['AQ', num2str(NumberOfRows)];
    xlswrite(ExcelFileName,A,sheet,x1Range)
end 

% Open the VRML visualization
if results == 1
    vr_world = vrworld(['simresults/C16_DirectionalStability/LZV_custom/',directional_results,'/',directional_wrl]);
else
    vr_world = vrworld(['simresults/C16_DirectionalStability/LZV_custom/',Truckname,'/',Truckname,'_directional.wrl']);   
end

open(vr_world);
vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
          'Position',[0 0 1 0.9],'Viewpoint','Side view','NavZones','On');  
      
viewpoint_directional = 2;  

function run_directional_visualization_callback(source,eventdata)
global Truckname S directional_results directional_filename
global results directional_sim directional_wrl

% Press the toggle button
set(S.directional_stop_vis_push, 'Value',0);

% Update the VR Sink block
if results == 1
    vrmodelname  = ['simresults/C16_DirectionalStability/LZV_custom/',directional_results,'/',directional_sim];
    load_system(vrmodelname)    
    [~,name,~] = fileparts(directional_sim);
    h_vrsink = [name,'/VR sink'];
else
    vrmodelname = ['simresults/C16_DirectionalStability/LZV_custom/',Truckname,'/',Truckname,'_anim_directional.slx'];  
    load_system(vrmodelname)
    h_vrsink=find_system('referenceblock','vrlib/VR Sink');
    h_vrsink=char(h_vrsink(1));
end
x = get_param(h_vrsink, 'FieldsWritten');
if results == 1
    set_param(h_vrsink, 'WorldFileName', directional_wrl);
else
    set_param(h_vrsink, 'WorldFileName', [Truckname,'_directional.wrl']);
end
set_param(h_vrsink, 'FieldsWritten', x);
save_system(vrmodelname)

if isempty(directional_results) == 0
    dirName = ['simresults\C16_DirectionalStability\LZV_custom\',directional_results];
    files = dir( fullfile(dirName,'*.mat') );
    filename = files.name;
    load(filename,'VR','s','dt');
else
    load(['simresults/C16_DirectionalStability/LZV_custom/',Truckname,'/',directional_filename])
end       
assignin('base','VR',VR);
assignin('base','s',s);
assignin('base','dt',dt);

% Start simulation
sim(vrmodelname)

% Set the toggle buttons to the right value when simulation is done
set(S.directional_stop_vis_push, 'Value',1);
set(S.directional_run_vis_push, 'Value',0);

function stop_directional_visualization_callback(source,eventdata)
global S
set_param(bdroot, 'SimulationCommand', 'stop')
set(S.directional_stop_vis_push, 'Value',1);
set(S.directional_run_vis_push, 'Value',0);

function directional_speed_callback(source,eventdata)
global S results directional_results Truckname directional_sim

if results == 1
    vrmodelname  = ['simresults/C16_DirectionalStability/LZV_custom/',directional_results,'/',directional_sim];
    load_system(vrmodelname)    
    [~,name,~] = fileparts(directional_sim);
    h_vrsink = [name,'/VR sink'];
else
    vrmodelname = ['simresults/C16_DirectionalStability/LZV_custom/',Truckname,'/',Truckname,'_anim_directional.slx'];  
    load_system(vrmodelname)
    h_vrsink=find_system('referenceblock','vrlib/VR Sink');
    h_vrsink=char(h_vrsink(1));
end

if get(S.directional_speed_popup,'Value') == 1
    set_param(h_vrsink, 'SampleTime','0.05')
elseif get(S.directional_speed_popup,'Value') == 2
    set_param(h_vrsink, 'SampleTime','0.1')
elseif get(S.directional_speed_popup,'Value') == 3
    set_param(h_vrsink, 'SampleTime','0.5')
end

function directional_view_callback(source,eventdata)
global S results directional_results directional_wrl Truckname viewpoint_directional

if results == 1
    vr_world = vrworld(['simresults/C16_DirectionalStability/LZV_custom/',directional_results,'/',directional_wrl]);
else
    vr_world = vrworld(['simresults/C16_DirectionalStability/LZV_custom/',Truckname,'/',Truckname,'_directional.wrl']);   
end
open(vr_world);
vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
          'Position',[0 0 1 0.9],'Viewpoint','Side view','NavZones','On');  
      
if get(S.directional_view_popup,'Value') == 1
    viewpoint_directional = 1;
    if get(S.directional_nav_popup,'Value') == 1
        vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
        'Position',[0 0 1 0.9],'Viewpoint','Top view (moving)','NavZones','On');
    else
        vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
        'Position',[0 0 1 0.9],'Viewpoint','Top view (moving)','NavZones','Off');
    end
elseif get(S.directional_view_popup,'Value') == 2
    viewpoint_directional = 2;
    if get(S.directional_nav_popup,'Value') == 1    
        vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
        'Position',[0 0 1 0.9],'Viewpoint','Side view','NavZones','On');
    else
        vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
        'Position',[0 0 1 0.9],'Viewpoint','Side view','NavZones','Off');        
    end
elseif get(S.directional_view_popup,'Value') == 3
    viewpoint_directional = 3;
    if get(S.directional_nav_popup,'Value') == 1
        vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
              'Position',[0 0 1 0.9],'Viewpoint','Rear view (moving)','NavZones','On');
    else
        vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
        'Position',[0 0 1 0.9],'Viewpoint','Rear view (moving)','NavZones','Off');        
    end
elseif get(S.directional_view_popup,'Value') == 4
    viewpoint_directional = 4;
    if get(S.directional_nav_popup,'Value') == 1
        vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
        'Position',[0 0 1 0.9],'Viewpoint','Front view (moving)','NavZones','On');
    else
        vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
        'Position',[0 0 1 0.9],'Viewpoint','Front view (moving)','NavZones','Off');        
    end
elseif get(S.directional_view_popup,'Value') == 5
    viewpoint_directional = 5;
    if get(S.directional_nav_popup,'Value') == 1
        vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
        'Position',[0 0 1 0.9],'Viewpoint','Top rotating view','NavZones','On');
    else
        vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
        'Position',[0 0 1 0.9],'Viewpoint','Top rotating view','NavZones','Off');        
    end
end

function directional_nav_callback(source,eventdata)
global S results directional_wrl Truckname directional_results viewpoint_directional

% Open the VRML visualization
if results == 1
    vr_world = vrworld(['simresults/C16_DirectionalStability/LZV_custom/',directional_results,'/',directional_wrl]);
else
    vr_world = vrworld(['simresults/C16_DirectionalStability/LZV_custom/',Truckname,'/',Truckname,'_directional.wrl']);   
end
open(vr_world);
vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
          'Position',[0 0 1 0.9],'Viewpoint','Side view','NavZones','On'); 
      
if get(S.directional_nav_popup,'Value') == 1
    if viewpoint_directional == 1
    vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
              'Position',[0 0 1 0.9],'Viewpoint', 'Top view (moving)','NavZones','On');        
    elseif viewpoint_directional == 2
    vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
              'Position',[0 0 1 0.9],'Viewpoint', 'Side view','NavZones','On');
    elseif viewpoint_directional == 3
    vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
              'Position',[0 0 1 0.9],'Viewpoint', 'Rear view (moving)','NavZones','On');
    elseif viewpoint_directional == 4
    vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
              'Position',[0 0 1 0.9],'Viewpoint', 'Front view (moving)','NavZones','On');
    elseif viewpoint_directional == 5
    vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
              'Position',[0 0 1 0.9],'Viewpoint', 'Top rotating view','NavZones','On');
    end
    
elseif get(S.directional_nav_popup,'Value') == 2
    if viewpoint_directional == 1
    vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
              'Position',[0 0 1 0.9],'Viewpoint', 'Top view (moving)','NavZones','Off');        
    elseif viewpoint_directional == 2
    vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
              'Position',[0 0 1 0.9],'Viewpoint', 'Side view','NavZones','Off');
    elseif viewpoint_directional == 3
    vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
              'Position',[0 0 1 0.9],'Viewpoint', 'Rear view (moving)','NavZones','Off');
    elseif viewpoint_directional == 4
    vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
              'Position',[0 0 1 0.9],'Viewpoint', 'Front view (moving)','NavZones','Off');
    elseif viewpoint_directional == 5
    vr.canvas(vr_world,'Parent', S.visual_directional_panel,'Units','Normalized',...
              'Position',[0 0 1 0.9],'Viewpoint', 'Top rotating view','NavZones','Off');
    end
end

function Back_callback(source, eventdata)
global results custom

if results == 1
    closereq;
    core_simulation_results
elseif results == 0
    closereq;
    if custom == 1
        custom_core_simulation
    else
        core_simulation
    end
end